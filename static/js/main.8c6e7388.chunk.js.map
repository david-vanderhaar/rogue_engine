{"version":3,"sources":["nystrum/Screen/constants.js","helper.js","nystrum/Entities/Entity.js","nystrum/constants.js","nystrum/Actions/Base.js","nystrum/Actions/DestroySelf.js","nystrum/Actions/EngineCrank.js","nystrum/Entities/Parent.js","nystrum/message.js","nystrum/Entities/Attacking.js","nystrum/Entities/Equipable.js","nystrum/Entities/Acting.js","nystrum/Entities/Rendering.js","nystrum/Entities/Containing.js","nystrum/sounds.js","nystrum/Entities/Playing.js","nystrum/Entities/helper.js","nystrum/Actions/Say.js","nystrum/Actions/Attack.js","nystrum/Actions/Move.js","nystrum/Actions/ThrowProjectile.js","nystrum/Actions/SelfDestructiveAttack.js","nystrum/Actions/ProjectileMove.js","nystrum/Actions/Shove.js","nystrum/Actions/ThrowProjectileGas.js","nystrum/Entities/Chasing.js","nystrum/Actions/PlaceActor.js","nystrum/Entities/Draggable.js","nystrum/Entities/Pushable.js","nystrum/Entities/Destructable.js","nystrum/Entities/Burnable.js","nystrum/Entities/index.js","nystrum/Entities/UI.js","nystrum/Entities/Speaking.js","nystrum/Entities/Helpless.js","nystrum/Entities/Exploding.js","nystrum/Entities/DirectionalPushing.js","nystrum/Entities/RangedChasing.js","nystrum/Entities/Dragging.js","nystrum/Entities/Charging.js","nystrum/Entities/Signing.js","nystrum/Entities/Equiping.js","nystrum/Entities/HasInnerGates.js","nystrum/Entities/Cloning.js","nystrum/Entities/DestructiveProjecting.js","nystrum/Entities/DirectionalProjecting.js","nystrum/Entities/GaseousDestructiveProjecting.js","nystrum/Entities/Gaseous.js","nystrum/Entities/Spreading.js","nystrum/Entities/IsParticle.js","nystrum/Engine/engine.js","nystrum/Display/konvaCustom.js","nystrum/Modes/default.js","nystrum/items.js","nystrum/Maps/helper.js","nystrum/Maps/generator.js","nystrum/Modes/flume.js","nystrum/Modes/index.js","nystrum/Modes/castle.js","nystrum/game.js","nystrum/UI/Instructions.js","nystrum/UI/Button.js","nystrum/UI/Information.js","nystrum/UI/Equipment.js","nystrum/UI/Inventory.js","nystrum/UI/Keymap.js","nystrum/UI/Messages.js","nystrum/Screen/Level.js","nystrum/UI/CharacterSelect.js","nystrum/Screen/Title.js","nystrum/Screen/Lose.js","nystrum/Screen/Win.js","nystrum/Screen/CharacterSelect.js","nystrum/UI/ModeSelect.js","nystrum/Screen/index.js","nystrum/Screen/ModeSelect.js","nystrum/Actions/DropItem.js","nystrum/Keymap/helper.js","nystrum/Keymap/KeyActions/activateDropItem.js","nystrum/Actions/UnequipItemToTile.js","nystrum/Keymap/KeyActions/activateEquipment.js","nystrum/Actions/EquipItemFromContainer.js","nystrum/Keymap/KeyActions/activateInventory.js","nystrum/Keymap/KeyActions/activateThrow.js","nystrum/Actions/SprayWater.js","nystrum/Actions/CursorMove.js","nystrum/Keymap/KeyActions/moveCursor.js","nystrum/Keymap/KeyActions/activateProjectile.js","nystrum/Keymap/KeyActions/walk.js","nystrum/Actions/PickupItem.js","nystrum/Actions/EquipItemFromTile.js","nystrum/Keymap/KeyActions/push.js","nystrum/Actions/MoveMultiple.js","nystrum/Actions/Tackle.js","nystrum/Keymap/KeyActions/activateFlyingLotus.js","nystrum/statusEffects.js","nystrum/Actions/AddStatusEffect.js","nystrum/Keymap/KeyActions/drunkenFist.js","nystrum/Actions/MultiTargetAttack.js","nystrum/Keymap/KeyActions/chop.js","nystrum/Actions/ReleaseGrab.js","nystrum/Actions/GrabDirection.js","nystrum/Keymap/KeyActions/activateGrab.js","nystrum/Characters/RockLee.js","nystrum/Keymap/KeyActions/none.js","nystrum/Keymap/KeyActions/removeWeights.js","nystrum/Keymap/KeyActions/leafWhirlwind.js","nystrum/Keymap/KeyActions/openInnerGate.js","nystrum/Keymap/KeyActions/pickupRandom.js","nystrum/Keymap/KeyActions/addActor.js","nystrum/Characters/FireFighter.js","nystrum/Characters/index.js","nystrum/Nystrum.js","App.js","serviceWorker.js","index.js"],"names":["SCREENS","delay","timeDelayed","Promise","resolve","setTimeout","clamp","value","min","max","Math","getRandomInArray","array","floor","random","length","getRandomInt","ceil","coordsToString","coords","x","y","calculatePath","game","targetPos","currentPos","topology","map","isPassable","tile","tileKey","type","passable","astar","ROT","AStar","path","compute","push","slice","calculatePathWithRange","range","getRandomPos","keys","Object","key","split","coordinates","parseInt","text","getDestructableEntities","entites","filter","entity","hasOwnProperty","getGranularity","radius","pow","getPointsOnCircumference","centerX","centerY","r","n","list","i","round","cos","PI","sin","Entity","name","id","uuid","this","entityTypes","active","COLORS","THEMES","base03","base02","base01","base00","base0","base1","base2","base3","yellow","orange","red","magenta","violet","blue","cyan","green","TILE_KEY","background","foreground","character","sprite","animation","DIRECTIONS","N","NE","W","NW","SW","S","SE","E","NONE","EQUIPMENT_TYPES","EQUIPMENT_LAYOUTS","item","CLONE_PATTERNS","verticalLine","x_offset","y_offset","positions","taken","smallSquare","square","bigSquare","circle","Helper","PARTICLE_TEMPLATES","default","renderer","color","fail","succede","damage","leaf","water","PARTICLE_TYPE","ALPHABET","Base","actor","energyCost","processDelay","particles","particleTemplate","Constant","onBefore","onAfter","onSuccess","onFailure","interrupt","life","pos","direction","particle","Particle","energy","console","log","success","alternative","DestroySelf","args","destroy","EngineCrank","engine","start","Parent","superclass","children","CrankEngine","concat","isInitialized","child","entities","e","actors","draw","includes","forEach","destroyChild","canAttack","bind","placeActorOnMap","addActor","initialize","MESSAGE_TYPE","INFORMATION","backgroundColor","ACTION","DANGER","STATUS_EFFECT","ERROR","Message","Attacking","attackDamage","additional","targets","target","getAttackDamage","equipment","slot","addMessage","decreaseDurability","Equipable","equipmentType","Acting","actions","speed","action","Rendering","currentFrame","canOccupyPosition","targetTile","pushable","newPos","move","ContainerSlot","itemType","items","Containing","container","slots","index","findIndex","createSlot","it","splice","window","PUBLIC_URL","fire_0","Howl","src","volume","loop","fire_1","scream_0","scream_1","scream_2","water_0","water_1","chop_0","chop_1","equip_0","equip_1","explosion_0","save","lose","grab_0","release_0","Playing","keymap","nextAction","destroyEntity","removeStatusEffectByActorId","Say","message","messageType","Attack","attack","SOUNDS","play","addParticle","Move","ThrowProjectile","move_result","shift","SelfDestructiveAttack","damageToSelf","decreaseDurabilityWithoutDefense","ProjectileMove","Shove","shove","ThrowProjectileGas","Chasing","targetEntity","PlaceActor","forcePlacement","addActorAsNext","Draggable","draggable","Pushable","Destructable","durability","defense","onDestroy","getDefense","current","newDurability","Burnable","canBurn","willResetCanBurn","UI_Actor","pipe","initiatedBy","Speaker","messages","saved","Debris","flammability","explosivity","Array","fill","FireSpread","timeToSpread","spreadCount","fire","structure","reduce","acc","curr","position","enflame","explode","Bandit","RangedBandit","getProjectile","pathToCheck","inPath","throwDirection","sign","projectile","createPath","targetInPath","movePath","Player","draggedEntity","lastPos","moveSuccess","drag","charge","chargeMax","signHistory","itemName","slotName","find","foundSlot","currentGate","gates","damageBuff","speedBuff","durabilityDebuff","nextGate","nextGateIndex","gate","cloneLimit","clones","clone","c","super__destroy","cloneArgs","cloneDeep","destroyClone","arg","attribute","Weapon","Armor","DirectionalProjectile","setActorToPrevious","owner_id","isClone","cloneCount","clonePattern","offset","cloneDeepWith","referencePos","timeToSpreadMax","spreadCountMax","adjacentPositions","adjacentPos","kill","newTile","tileExists","Boolean","notBurnt","step","nextPos","getNextPos","Engine","statusEffects","currentActor","isRunning","gainEnergy","hasEnoughEnergy","getAction","result","perform","acting","timePassed","processActionFX","shouldAutoRun","processStatusEffects","sortActorsByEnergy","processV2","visibleKeymap","updateMode","updateReact","sort","a","b","newEffect","allowDuplicates","effect","onStart","onStop","actorId","lifespan","timeToLive","timeSinceLastStep","stepInterval","onStep","removeDeadStatusEffects","actionSuccess","removeActorFromMap","update","removeDeadParticles","process","mode","ANIMATION_TYPES","Animation","display","lifeTime","node","frame","timeDiff","getActive","removeAnimation","ExampleAnimation","BlinkTile","lerpDirection","rect","Konva","Rect","tileWidth","tileOffset","tileGutter","tileHeight","offsetX","offsetY","width","height","strokeEnabled","transformsEnabled","perfectDrawEnabled","listening","shadowForStrokeEnabled","animationLayer","add","opacity","Display","containerId","tilesWide","getTilesWide","tilesHigh","getTilesHigh","stage","layer","animations","animationLoop","document","d","getElementById","displayContainer","createElement","appendChild","Stage","Layer","hitGraphEnabled","stop","anim","Group","Text","fontSize","fontFamily","align","verticalAlign","batchDraw","Mode","data","TYPE","directionalKunai","axe","waterGun","fireJacket","addTileZone","origin","mapHeight","mapWidth","j","generate","unitCount","unitSize","floorPlan","createFloorPlan","unit","createRoomInFloorPlan","unitPosition","getUnitPosition","didCreate","createUnit","removeInnerWalls","addInnerWalls","newUnit","getNeighboringUnit","unitAlreadyExists","unitExists","pnt","pos_two","pos_one","getNeighboringPoints","existingUnits","floorPlanPos","mapOffsetX","mapOffsetY","eightWay","neighbors","size","border","unitCollidesWithEdge","newPosition","coordArray","point","t","count","corners","wallCount","corner","wallNeighbors","selectedWallPos","build","currentPosition","previousFloorPositions","prevPos","Flume","level","highestLevel","fireIntensity","npcCount","debrisCount","mediumDebrisCount","heavyDebrisCount","smallGasCanCount","mediumGasCanCount","largeGasCanCount","turnCount","createEmptyLevel","initializeMapTiles","generateBuilding","MapHelper","placeInitialItems","placePlayersInSafeZone","posXY","coord","addDebris","mediumCanCount","addFire","addNPC","playing","getSaveCountRequirement","propogateFire","burnEntities","checkRemoveSafeFloors","hasLost","reset","initializeGameData","hasWon","nextLevel","increaseIntensity","setLevel","resetIntensity","toWin","gasCanCount","minimum","countNpcSafe","toLose","box","ent","burn","resetCanBurn","objects","Item","pop","players","player","require","Castle","creatureCount","setWaveData","padding","floorTiles","groundTiles","addEnemy","beginNextWave","banditLevels","entityClass","banditStats","getBanditStats","Game","entityMap","entityDictionary","mapInitialized","tileMap","getSelectedCharacter","spriteMode","placed","randomlyPlaceActorOnMap","ac","digger","Arena","freeCells","create","randomlyPlaceAllActorsOnMap","tiles","hasImpassableEntity","fullMap","referencePosition","renderWidth","renderHeight","fullWidth","fullHeight","renderPaddingX","renderPaddingY","parts","finalX","finalY","callback","getRenderMap","getPlayerPosition","tileRenderer","nextFrame","animateTile","animateEntity","processTileMap","createTile","playerPos","getPlayers","updateTile","getEntityRenderer","getTileRenderer","isPlaced","placeActorsOnMap","presserRef","show","focus","selectedCharacter","initializeMode","initializeUI","handleKeyPress","event","code","Instructions","modeDetails","className","props","onClick","setActiveScreen","toggleSpriteMode","React","Component","Button","Keymap","entries","hidden","activate","refocus","label","style","borderColor","Messages","Level","ENGINE","selectedMode","class","state","activeTab","createRef","newGameState","setState","ref","onKeyDown","tabIndex","reverse","CharacterSelect","characters","top","setSelectedCharacter","Title","backgroundImage","backgroundRepeat","backgroundPosition","backgroundPositionY","Lose","Win","ModeSelect","modes","setSelectedMode","DropItem","removeFromContainer","addAlphabeticallyToKeymap","obj","alphabetAllowed","letter","deactivateUIKeymap","visibleUIKey","currentUiActor","removeActor","createFourDirectionMoveOptions","moveFunction","w","s","createEightDirectionMoveOptions","z","q","activateDropItem","visibleInventory","ui","addActorAsPrevious","Escape","setNextAction","keymapDropFromInventory","UnequipItemToTile","unequip","activateEquipment","visibleEquipment","keymapEquipment","EquipItemFromContainer","itemInSlot","getItemInSlot","addToContainer","equip","activateInventory","keymapEquipFromInventory","keymapCursorToThrowItem","initialKeymap","kunai","contains","throwDirectionalKunai","SprayWater","hasItemNameEquipped","ITEM_TYPES","CursorMove","initiatedFrom","cursorCanOccupyPosition","moveCursor","newX","newY","previousKeymap","goToPreviousKeymap","cursor","trigger","walk","PickupItem","EquipItemFromTile","MoveMultiple","stepCount","Tackle","additionalAttackDamage","keymapFlyingLotus","ENERGY_THRESHOLD","flyingLotus","AddStatusEffect","addStatusEffect","drunkWalk","originalDirection","MultiTargetAttack","targetPositions","particlePath","particlePos","attackSuccess","chop","addAnimation","keyMapChop","ReleaseGrab","releasedEntity","release","GrabDirection","grab","keymapCursorToGrabEntity","grabDirection","l","k","speedBoost","damageDebuff","StatusEffect","h","g","setNextGate","nextGateToLabel","getNextGate","o","u","p","kunais","swords","Characters","RockLee","FireFighter","Nystrum","characterKey","selected","Modes","activeScreen","characterScreen","Screen","modeScreen","titleScreen","loseScreen","winScreen","levelScreen","getActiveScreen","transitionName","transitionAppear","transitionEnter","transitionLeave","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","App","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c6e7388.chunk.js","sourcesContent":["export const SCREENS = {\n  TITLE: 'Title',\n  LEVEL: 'Level',\n  LOSE: 'Lose',\n  WIN: 'Win',\n  CHARACTER_SELECT: 'CharacterSelect',\n  MODE_SELECT: 'ModeSelect',\n}","import * as ROT from 'rot-js';\n\nexport const delay = (timeDelayed = 100) => {\n  // return;\n  if (timeDelayed <= 0) return;\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const clamp = (value, min, max) => {\n  return Math.min(Math.max(value, min), max);\n};\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const coordsAreEqual = (pos_one, pos_two) => pos_one.x === pos_two.x && pos_one.y === pos_two.y\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const calculatePath = (game, targetPos, currentPos, topology = 4) => {\n  let map = game.map\n  let isPassable = function (x, y) {\n    const tile = map[x + \",\" + y];\n    if (tile) {\n      return (game.tileKey[tile.type].passable);\n    } else {\n      return false\n    }\n  }\n  let astar = new ROT.Path.AStar(targetPos.x, targetPos.y, isPassable, { topology });\n  let path = [];\n  astar.compute(currentPos.x, currentPos.y, function (x, y) {\n    path.push({ x, y })\n  });\n\n  return path.slice(1);\n}\n\nexport const calculatePathWithRange = (game, targetPos, currentPos, topology, range) => {\n  let path = calculatePath(game, targetPos, currentPos, topology);\n  return path.slice(0, range + 1);\n}\n\nexport const getRandomPos = (map) => {\n  let keys = Object.keys(map);\n  let key = getRandomInArray(keys).split(',');\n  let pos = { x: parseInt(key[0]), y: parseInt(key[1])}\n  return {coordinates: pos, text: key}\n}\n\nexport const getDestructableEntities = (entites) => {\n  return entites.filter((entity) => entity.hasOwnProperty('durability'));\n}\n\nconst getGranularity = (radius) => {\n  let result = (2 / 3) * (Math.pow(radius, 3) - (9 * Math.pow(radius, 2)) + (32 * radius) - 18)\n  return result\n}\n\nexport const getPointsOnCircumference = (centerX = 0, centerY = 0, r = 3) => {\n  const n = getGranularity(r);\n  let list = [];\n  for (let i = 0; i < n; i++) {\n    let x = Math.round(centerX + (Math.cos(2 * Math.PI / n * i) * r))\n    let y = Math.round(centerY + (Math.sin(2 * Math.PI / n * i) * r))\n    list.push({ x, y });\n  }\n  return list\n}\n","import uuid from 'uuid/v1';\nexport class Entity {\n  constructor({ game = null, passable = false, name = 'nameless' }) {\n    let id = uuid();\n    this.entityTypes = ['Entity'];\n    this.id = id;\n    this.name = name;\n    this.game = game;\n    this.passable = passable;\n    this.active = true;\n  }\n}\n","import * as Helper from '../helper'\n\nexport const ENERGY_THRESHOLD = 100;\n\nexport const COLORS = {\n  black_1: '#424242',\n  gray_1: '#262d37',\n  gray_2: '#606b79',\n  gray_4: '#B7C3CD',\n  gray_5: '#CED5DD',\n  green_1: '#1d533c',\n  green_2: '#227743',\n  green_3: '#2d9c59',\n  red_4: '#D82D33',\n  red_5: '#E16264',\n  purple_3: '#c45ffd',\n}\n\nexport const THEMES = {\n  SOLARIZED: {\n    base03: '#002b36',\n    base02: '#073642',\n    base01: '#586e75',\n    base00: '#657b83',\n    base0: '#839496',\n    base1: '#93a1a1',\n    base2: '#eee8d5',\n    base3: '#fdf6e3',\n    yellow: '#b58900',\n    orange: '#cb4b16',\n    red: '#dc322f',\n    magenta: '#d33682',\n    violet: '#6c71c4',\n    blue: '#268bd2',\n    cyan: '#2aa198',\n    green: '#859900',\n  }\n}\n\nexport const NPC_NAME = 'Helpless Citizen';\nexport const PLAYER_NAME = 'Fire Fighter';\n\nexport const TILE_KEY = {\n  'GROUND': {\n    background: THEMES.SOLARIZED.base03,\n    foreground: THEMES.SOLARIZED.base01,\n    character: '.',\n    sprite: '',\n    passable: true,\n  },\n  'FLOOR': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.base0,\n    character: '',\n    passable: true,\n  },\n  'SAFE_FLOOR': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.base0,\n    character: '',\n    passable: true,\n  },\n  'BURNT': {\n    background: THEMES.SOLARIZED.base03,\n    foreground: THEMES.SOLARIZED.red,\n    character: 'X',\n    sprite: '',\n    passable: true,\n    animation: [\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'X', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'x', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'X', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.orange, character: 'x', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.orange, character: 'X', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.yellow, character: 'x', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.red, character: 'X', sprite: '', passable: true, },\n    ]\n  },\n  'WET': {\n    background: THEMES.SOLARIZED.base03,\n    foreground: THEMES.SOLARIZED.blue,\n    character: '=',\n    sprite: '',\n    passable: true,\n    animation: [\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '=', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '~', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '=', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.base0, character: '~', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.base1, character: '=', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.base1, character: '~', sprite: '', passable: true, },\n      { background: THEMES.SOLARIZED.base03, foreground: THEMES.SOLARIZED.blue, character: '=', sprite: '', passable: true, },\n    ]\n  },\n  'WALL': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.base2,\n    character: '#',\n    sprite: '',\n    passable: false,\n  },\n  'DOOR': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.base0,\n    character: '+',\n    sprite: '',\n    passable: true,\n  },\n  'SAFE': {\n    background: THEMES.SOLARIZED.base02,\n    foreground: THEMES.SOLARIZED.green,\n    character: '+',\n    sprite: '',\n    passable: true,\n  },\n\n  'WATER': {\n    animation: [\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#8aa', character: '▒', passable: false, },\n      { background: '#424242', foreground: '#8aa', character: '▓', passable: false, },\n    ],\n    background: '#9dc3d3',\n    character: '░',\n    passable: false,\n  },\n}\n\nexport const HAND_SIGNS = {\n  Power: {\n    type: 'Power',\n    name: 'Rin',\n    description: 'Strength of mind, body, spirit',\n  },\n  Energy: {\n    type: 'Energy',\n    name: 'Pyo',\n    description: 'energy direction',\n  },\n  Harmony: {\n    type: 'Harmony',\n    name: 'To',\n    description: 'one- ness with the universe or self',\n  },\n  Healing: {\n    type: 'Healing',\n    name: 'Sha',\n    description: 'of self and others',\n  },\n  Intuition: {\n    type: 'Intuition',\n    name: 'Kai',\n    description: 'premonition of danger, feeling others intent',\n  },\n  Awareness: {\n    type: 'Awareness',\n    name: 'Jin',\n    description: 'feeling thoughts of others, perhaps hiding your own',\n  },\n  Dimension: {\n    type: 'Dimension',\n    name: 'Retsu',\n    description: 'control of time and space',\n  },\n  Creation: {\n    type: 'Creation',\n    name: 'Zai',\n    description: 'understanding nature',\n  },\n  Absolute: {\n    type: 'Absolute',\n    name: 'Zen',\n    description: 'enlightenment',\n  }, \n}\n\nexport const DIRECTIONS = {\n  N: [0, -1],\n  NE: [1, -1],\n  W: [-1, 0],\n  NW: [-1, -1],\n  SW: [-1, 1],\n  S: [0, 1],\n  SE: [1, 1],\n  E: [1, 0],\n  NONE: [0, 0],\n}\n\nexport const getDirectionKey = (direction) => {\n  let directionString = `${direction}`;\n  let keys = Object.keys(DIRECTIONS);\n  let result = false\n  keys.forEach((key) => {\n    if (`${DIRECTIONS[key]}` === directionString) {\n      result = key\n    }\n  })\n  return result\n}\n\nexport const EQUIPMENT_TYPES = {\n  HEAD: 'HEAD',\n  TORSO: 'TORSO',\n  BACK: 'BACK',\n  HAND: 'HAND',\n  FEET: 'FEET',\n  GENERIC: 'GENERIC',\n}\n\nexport const EQUIPMENT_LAYOUTS = {\n  human: () => {\n    return [\n      {type: EQUIPMENT_TYPES.HEAD, name: 'head', item: null},\n      {type: EQUIPMENT_TYPES.TORSO, name: 'torso', item: null},\n      {type: EQUIPMENT_TYPES.BACK, name: 'back', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'left_hand', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'right_hand', item: null},\n      {type: EQUIPMENT_TYPES.FEET, name: 'feet', item: null},\n    ]\n  },\n  limited: () => {\n    return [\n      {type: EQUIPMENT_TYPES.GENERIC, name: 'slot_1', item: null},\n      {type: EQUIPMENT_TYPES.GENERIC, name: 'slot_2', item: null},\n    ]\n  }\n}\n\nexport const CLONE_PATTERNS = {\n  verticalLine: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n    ]\n  },\n  smallSquare: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n    ]\n  },\n  square: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n    ]\n  },\n  bigSquare: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 2, y: 2, taken: false, },\n      { x: 2, y: 0, taken: false, },\n      { x: 2, y: -2, taken: false, },\n      { x: 0, y: -2, taken: false, },\n      { x: -2, y: -2, taken: false, },\n      { x: -2, y: 0, taken: false, },\n      { x: -2, y: 2, taken: false, },\n    ],\n  },\n  circle: {\n    x_offset: 0,\n    y_offset: 0,\n    positions: [\n      ...Helper.getPointsOnCircumference(0, 0, 2),\n      ...Helper.getPointsOnCircumference(0, 0, 3)\n    ]\n  },\n}\n\nexport const PARTICLE_TEMPLATES = {\n  default: {\n    renderer: {\n      character: '*',\n      color: 'black',\n      background: 'white',\n    }\n  },\n  fail: {\n    renderer: {\n      character: 'x',\n      color: 'black',\n      background: 'red',\n    }\n  },\n  succede: {\n    renderer: {\n      character: 'x',\n      color: THEMES.SOLARIZED.base3,\n      background: THEMES.SOLARIZED.green,\n    }\n  },\n  damage: {\n    renderer: {\n      character: '*',\n      color: 'darkred',\n      background: 'red',\n    }\n  },\n  leaf: {\n    renderer: {\n      character: '✤',\n      color: '#36635b',\n      background: '#F0D8C0',\n    }\n  },\n  water: {\n    renderer: {\n      character: '~',\n      color: THEMES.SOLARIZED.base3,\n      background: THEMES.SOLARIZED.blue,\n    }\n  },\n}\n\nexport const PARTICLE_TYPE = {\n  directional: 0,\n  path: 1,\n}\n\nexport const ALPHABET = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];","import { Particle } from '../Entities/index';\nimport * as Constant from '../constants';\n\nexport class Base {\n  constructor({ \n    game, \n    actor, \n    energyCost = 100, \n    processDelay = 50, \n    particles = [], \n    particleTemplate = Constant.PARTICLE_TEMPLATES.default, \n    onBefore = () => null, \n    onAfter = () => null, \n    onSuccess = () => null, \n    onFailure = () => null, \n    interrupt = false, \n  }) {\n    this.actor = actor;\n    this.game = game;\n    this.energyCost = energyCost;\n    this.processDelay = processDelay;\n    this.particles = particles;\n    this.particleTemplate = particleTemplate;\n    this.onBefore = onBefore;\n    this.onAfter = onAfter;\n    this.onSuccess = onSuccess;\n    this.onFailure = onFailure;\n    this.interrupt = interrupt;\n  }\n\n  addParticle(\n    life, \n    pos, \n    direction, \n    renderer = { ...this.particleTemplate.renderer }, \n    type = Constant.PARTICLE_TYPE.directional, \n    path = null\n  ) {\n    let particle = new Particle({\n      game: this.game,\n      name: 'particle',\n      passable: true,\n      life,\n      pos,\n      direction,\n      energy: 100,\n      renderer,\n      type,\n      path,\n    });\n    this.particles.push(particle);\n  }\n\n  removeDeadParticles() {\n    this.particles = this.particles.filter((particle) => particle.life > 0);\n  }\n  \n  perform() {\n    console.log(`${this.actor.name} performs`);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    };\n  }\n}\n","import { Base } from './Base';\nexport class DestroySelf extends Base {\n  constructor({ processDelay = 0, ...args }) {\n    super({ ...args });\n    this.processDelay = processDelay;\n  }\n  perform() {\n    // console.log(`${this.actor.name} is self-destructing`);\n    this.actor.energy -= this.energyCost;\n    this.actor.destroy();\n    return {\n      success: true,\n      alternative: null,\n    };\n  }\n}\n;\n","import { Base } from './Base';\nimport { DestroySelf } from './DestroySelf';\nimport * as Constant from '../constants';\n\nexport class EngineCrank extends Base {\n  constructor({ engine, ...args }) {\n    super({ ...args });\n    this.engine = engine;\n  }\n  async perform() {\n    let success = true;\n    let alternative = null;\n    console.log(`${this.actor.name} is cranking its engine.`);\n    try {\n      await this.engine.start();\n      this.actor.energy -= this.energyCost;\n    }\n    catch (error) {\n      console.log('EngineCrank');\n      console.log(error);\n      alternative = new DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n      });\n    }\n    return {\n      success,\n      alternative,\n    };\n  }\n}\n;\n","import * as Constant from '../constants';\nimport * as Helper from '../../helper';\nimport { CrankEngine } from '../Engine/engine';\nimport { EngineCrank } from '../Actions/EngineCrank';\n\nexport const Parent = superclass => class extends superclass {\n  constructor({ children = [], engine = new CrankEngine({}), ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('PARENT');\n    this.children = children;\n    this.engine = engine;\n    this.isInitialized = false;\n  }\n  destroyChild(child) {\n    child.energy = 0;\n    let tile = this.game.map[Helper.coordsToString(child.pos)];\n    this.game.map[Helper.coordsToString(child.pos)].entities = tile.entities.filter((e) => e.id !== child.id);\n    this.engine.actors = this.engine.actors.filter((e) => e.id !== child.id);\n    this.game.draw();\n  }\n  canAttack(entity) {\n    const childIds = this.children.map((child) => child.id);\n    return !childIds.includes(entity.id);\n  }\n  initialize() {\n    this.isInitialized = true;\n    this.engine.game = this.game;\n    this.engine.actors = this.children;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this.game;\n      actor.destroy = () => { this.destroyChild(actor); };\n      actor.canAttack = this.canAttack.bind(this);\n      // actor.canAttack = (entity) => {this.canAttack(entity)};\n      this.game.placeActorOnMap(actor);\n      this.engine.addActor(actor);\n      this.game.draw();\n    });\n  }\n  getAction(game) {\n    // crank engine one turn\n    if (!this.isInitialized) {\n      this.initialize();\n    }\n    let result = new EngineCrank.EngineCrank({\n      game,\n      actor: this,\n      engine: this.engine,\n      energyCost: Constant.ENERGY_THRESHOLD,\n      processDelay: 10\n    });\n    return result;\n  }\n};\n","import { COLORS, THEMES } from './constants';\nimport uuid from 'uuid/v1';\n\nexport const MESSAGE_TYPE = {\n  INFORMATION: {\n    color: COLORS.gray_4,\n    backgroundColor: COLORS.black_1,\n  },\n  ACTION: {\n    color: COLORS.gray_2,\n    backgroundColor: COLORS.gray_5,\n  },\n  DANGER: {\n    color: COLORS.red_5,\n    backgroundColor: COLORS.black_1,\n  },\n  STATUS_EFFECT: {\n    color: THEMES.SOLARIZED.base3,\n    backgroundColor: THEMES.SOLARIZED.violet,\n  },\n  ERROR: {\n    color: THEMES.SOLARIZED.base3,\n    backgroundColor: THEMES.SOLARIZED.yellow,\n  },\n}\n\nexport class Message {\n  constructor({ text = '', type = MESSAGE_TYPE.INFORMATION }) {\n    let id = uuid();\n    this.id = id;\n    this.text = text;\n    this.type = type;\n  }\n}","import { MESSAGE_TYPE } from '../message';\nimport * as Helper from '../../helper';\n\nexport const Attacking = superclass => class extends superclass {\n  constructor({ attackDamage = 1, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('ATTACKING');\n    this.attackDamage = attackDamage;\n  }\n  getAttackDamage(additional = 0) {\n    return this.attackDamage + additional;\n  }\n  canAttack(entity) {\n    return true;\n  }\n  attack(targetPos, additional = 0) {\n    let success = false;\n    let tile = this.game.map[Helper.coordsToString(targetPos)];\n    if (!tile) {\n      return success;\n    }\n    let targets = Helper.getDestructableEntities(tile.entities);\n    if (targets.length > 0) {\n      let target = targets[0];\n      if (this.canAttack(target)) {\n        let damage = this.getAttackDamage(additional);\n        if (this.entityTypes.includes('EQUIPING')) {\n          this.equipment.forEach((slot) => {\n            if (slot.item) {\n              if (slot.item.entityTypes.includes('ATTACKING')) {\n                damage += slot.item.getAttackDamage();\n              }\n            }\n          });\n        }\n        this.game.addMessage(`${this.name} does ${damage} to ${target.name}`, MESSAGE_TYPE.DANGER);\n        target.decreaseDurability(damage);\n        success = true;\n      }\n    }\n    return success;\n  }\n};\n","import * as Constant from '../constants';\n\nexport const Equipable = superclass => class extends superclass {\n  constructor({ name = 'nameless', equipmentType = Constant.EQUIPMENT_TYPES.HAND, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('EQUIPABLE');\n    this.name = name;\n    this.equipmentType = equipmentType;\n  }\n};\n","import * as Helper from '../../helper';\n\nexport const Acting = superclass => class extends superclass {\n  constructor({ actions = [], speed = 100, energy = 0, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('ACTING');\n    this.actions = actions;\n    this.speed = speed;\n    this.energy = speed;\n  }\n  getAction() {\n    let action = Helper.getRandomInArray(this.actions);\n    if (action) {\n      return action;\n    }\n  }\n  gainEnergy(value = this.speed) {\n    this.energy += value;\n  }\n  hasEnoughEnergy() {\n    return this.energy > 0;\n  }\n};\n","import * as Helper from '../../helper';\n\nexport const Rendering = superclass => class extends superclass {\n  constructor({ pos = { x: 0, y: 0 }, renderer, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('RENDERING');\n    this.pos = pos;\n    this.renderer = { ...renderer };\n    this.currentFrame = 0;\n  }\n  getPosition() {\n    return this.pos;\n  }\n  move(targetPos) {\n    let success = false;\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      let tile = this.game.map[Helper.coordsToString(this.pos)];\n      this.game.map[Helper.coordsToString(this.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.id) };\n      this.pos = targetPos;\n      this.game.map[Helper.coordsToString(targetPos)].entities.push(this);\n      success = true;\n    }\n    return success;\n  }\n  shove(targetPos, direction) {\n    let success = false;\n    let targetTile = this.game.map[Helper.coordsToString(targetPos)];\n    if (targetTile) {\n      targetTile.entities.map((entity) => {\n        if (entity.entityTypes.includes('PUSHABLE')) {\n          if (!entity.passable && entity.pushable) {\n            let newX = entity.pos.x + direction[0];\n            let newY = entity.pos.y + direction[1];\n            let newPos = { x: newX, y: newY };\n            entity.move(newPos);\n          }\n        }\n      });\n    }\n    success = this.move(targetPos);\n    return success;\n  }\n};\n","export class ContainerSlot {\n  constructor({ itemType, items }) {\n    this.itemType = itemType;\n    this.items = items;\n  }\n}\n\nexport const Containing = superclass => class extends superclass {\n  constructor({ container = [], ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('CONTAINING');\n    this.container = container;\n  }\n  createSlot(item) {\n    let slot = new ContainerSlot({\n      itemType: item.name,\n      items: [item],\n    });\n    this.container.push(slot);\n  }\n  contains(itemType) {\n    let container = this.container;\n    let slots = container.filter((slot) => slot.itemType === itemType);\n    return slots.length > 0 ? slots[0].items[0] : false;\n  }\n  addToContainer(item) {\n    const index = this.container.findIndex((slot) => slot.itemType === item.name);\n    if (index >= 0) {\n      this.container[index].items.push(item);\n    }\n    else {\n      this.createSlot(item);\n    }\n  }\n  removeFromContainer(item) {\n    this.container.forEach((slot, index) => {\n      slot.items = slot.items.filter((it) => it.id !== item.id);\n      if (!slot.items.length)\n        this.container.splice(index, 1);\n    });\n  }\n};\n","import { Howl, Howler } from 'howler';\n\nconsole.log(window.PUBLIC_URL);\n\n\nexport default {\n  fire_0: new Howl({\n    src: [window.PUBLIC_URL + '/sounds/fire-00.mp3'],\n    volume: 0.5,\n    loop: true,\n  }),\n  fire_1: new Howl({\n    src: [window.PUBLIC_URL + '/sounds/fire-01.mp3'],\n    volume: 0.05,\n    loop: true,\n  }),\n  scream_0: new Howl({\n    src: [window.PUBLIC_URL + '/sounds/scream-00.wav']\n  }),\n  scream_1: new Howl({\n    src: [window.PUBLIC_URL + '/sounds/scream-01.wav']\n  }),\n  scream_2: new Howl({\n    src: [window.PUBLIC_URL + '/sounds/scream-02.wav']\n  }),\n  water_0: new Howl({\n    src: [window.PUBLIC_URL + '/sounds/water-04.wav']\n  }),\n  water_1: new Howl({\n    src: [window.PUBLIC_URL + '/sounds/water-05.wav']\n  }),\n  chop_0: new Howl({\n    src: [window.PUBLIC_URL + '/sounds/chop-00.wav']\n  }),\n  chop_1: new Howl({\n    src: [window.PUBLIC_URL + '/sounds/chop-01.wav']\n  }),\n  equip_0: new Howl({\n    src: [window.PUBLIC_URL + '/sounds/equip-00.wav']\n  }),\n  equip_1: new Howl({\n    src: [window.PUBLIC_URL + '/sounds/equip-01.wav']\n  }),\n  explosion_0: new Howl({\n    src: [window.PUBLIC_URL + '/sounds/explosion-00.wav'],\n    volume: 0.2,\n  }),\n  save: new Howl({\n    src: [window.PUBLIC_URL + '/sounds/save.wav'],\n  }),\n  lose: new Howl({\n    src: [window.PUBLIC_URL + '/sounds/lose-00.wav'],\n  }),\n  grab_0: new Howl({\n    src: [window.PUBLIC_URL + '/sounds/grab-00.wav'],\n  }),\n  release_0: new Howl({\n    src: [window.PUBLIC_URL + '/sounds/grab-01.wav'],\n  }),\n}","export const Playing = superclass => class extends superclass {\n  constructor({ keymap = {}, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('PLAYING');\n    this.nextAction = null;\n    this.keymap = keymap;\n  }\n  setNextAction(action) {\n    this.nextAction = action;\n  }\n  getAction() {\n    let action = this.nextAction;\n    this.nextAction = null;\n    return action;\n  }\n};\n","import * as Helper from '../../helper';\n\nexport const destroyEntity = (entity) => {\n  entity.energy = 0;\n  if (entity.pos) {\n    let tile = entity.game.map[Helper.coordsToString(entity.pos)];\n    entity.game.map[Helper.coordsToString(entity.pos)].entities = tile.entities.filter((e) => e.id !== entity.id);\n  }\n  // entity.game.engine.actors = entity.game.engine.actors.filter((e) => e.id !== entity.id);\n  entity.game.engine.removeStatusEffectByActorId(entity.id);\n  entity.game.draw()\n  entity.active = false;\n}","import { MESSAGE_TYPE } from '../message';\nimport { Base } from './Base';\nexport class Say extends Base {\n  constructor({ message, messageType = MESSAGE_TYPE.INFORMATION, processDelay = 50, ...args }) {\n    super({ ...args });\n    this.message = message;\n    this.messageType = messageType;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} says \"${this.message}\"`, this.messageType);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    };\n  }\n}\n;\n","import SOUNDS from '../sounds';\nimport { Base } from './Base';\nimport { Say } from './Say';\nimport * as Helper from '../../helper';\nimport * as Constant from '../constants';\n\nexport class Attack extends Base {\n  constructor({ targetPos, processDelay = 100, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos;\n    this.processDelay = processDelay;\n    this.particleTemplate = Constant.PARTICLE_TEMPLATES.damage;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (!this.actor.entityTypes.includes('ATTACKING')) {\n      return {\n        success: true,\n        alternative: new Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      };\n    }\n    success = this.actor.attack(this.targetPos);\n    if (success) {\n      const sound = Helper.getRandomInArray([SOUNDS.chop_0, SOUNDS.chop_1]);\n      sound.play();\n      this.addParticle(1, { ...this.targetPos }, { x: 0, y: 0 });\n      this.actor.energy -= this.energyCost;\n    }\n    return {\n      success,\n      alternative,\n    };\n  }\n}\n;\n","import { Base } from './Base';\nimport { Attack } from \"./Attack\";\nimport * as Constant from '../constants';\n\nexport class Move extends Base {\n  constructor({ targetPos, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    }\n    else {\n      success = true;\n      alternative = new Attack({\n        targetPos: this.targetPos,\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      });\n    }\n    return {\n      success,\n      alternative,\n    };\n  }\n}\n;\n","import { Move } from './Move';\nimport { DestroySelf } from './DestroySelf';\nimport * as Constant from '../constants';\n\nexport class ThrowProjectile extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    }\n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      let attackSuccess = this.actor.attack(this.targetPos);\n      if (attackSuccess) {\n        alternative = new DestroySelf({\n          game: this.game,\n          actor: this.actor,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n        });\n      }\n    }\n    return {\n      success,\n      alternative,\n    };\n  }\n}\n","import { Attack } from './Attack';\nexport class SelfDestructiveAttack extends Attack {\n  constructor({ damageToSelf, ...args }) {\n    super({ ...args });\n    this.damageToSelf = damageToSelf;\n    this.onSuccess = () => {\n      console.log('Self destruct success');\n      this.actor.decreaseDurabilityWithoutDefense(damageToSelf);\n    };\n    this.onFailure = () => {\n      console.log('Self destruct fails');\n      this.actor.destroy();\n    };\n  }\n}\n","import { Base } from './Base';\nimport { SelfDestructiveAttack } from \"./SelfDestructiveAttack\";\nimport * as Constant from '../constants';\n\nexport class ProjectileMove extends Base {\n  constructor({ targetPos, damageToSelf = 1, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos;\n    this.processDelay = processDelay;\n    this.damageToSelf = damageToSelf;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    }\n    else {\n      success = true;\n      alternative = new SelfDestructiveAttack({\n        targetPos: this.targetPos,\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        damageToSelf: this.damageToSelf,\n      });\n    }\n    return {\n      success,\n      alternative,\n    };\n  }\n}\n;\n","import { Base } from './Base';\nimport { Attack } from \"./Attack\";\nimport * as Constant from '../constants';\n\nexport class Shove extends Base {\n  constructor({ targetPos, direction, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos;\n    this.direction = direction;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.shove(this.targetPos, this.direction);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    }\n    else {\n      success = true;\n      alternative = new Attack({\n        targetPos: this.targetPos,\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      });\n    }\n    return {\n      success,\n      alternative,\n    };\n  }\n}\n;\n","import { Move } from './Move';\nimport { DestroySelf } from './DestroySelf';\nimport * as Constant from '../constants';\n\nexport class ThrowProjectileGas extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.processDelay = 0;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    }\n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      this.actor.attack(this.targetPos);\n    }\n    return {\n      success,\n      alternative,\n    };\n  }\n}\n","import * as Constant from '../constants';\nimport * as Helper from '../../helper';\nimport { Move } from '../Actions/Move';\n\nexport const Chasing = superclass => class extends superclass {\n  constructor({ targetEntity = null, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('CHASING');\n    this.targetEntity = targetEntity;\n  }\n  getAction(game) {\n    let path = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = path.length > 0 ? path[0] : this.pos;\n    let result = new Move({\n      targetPos,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    return result;\n  }\n};\n","import { Base } from './Base';\nimport * as Helper from '../../helper';\n\nexport class PlaceActor extends Base {\n  constructor({ targetPos, entity, interrupt = true, forcePlacement = false, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos;\n    this.entity = entity;\n    this.interrupt = interrupt;\n    this.forcePlacement = forcePlacement;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    // let canPlace = true;\n    // if (!this.game.canOccupyPosition(this.targetPos, this.entity)) canPlace = false;\n    // if (this.entity.entityTypes.includes('PARENT')) {\n    //   this.entity.children.forEach((child) => {\n    //     console.log(child.pos);\n    //     if (!this.game.canOccupyPosition(child.pos, child)) canPlace = false;\n    //   })\n    // }\n    // if (canPlace) {\n    //   this.entity.pos = this.targetPos;\n    //   this.game.engine.addActorAsPrevious(this.entity);\n    //   this.game.engine.start(); // should this be used outside of engine?\n    //   success = true;      \n    // }\n    let canOccupyPosition = this.forcePlacement ? true : this.game.canOccupyPosition(this.targetPos, this.entity);\n    const tile = this.game.map[Helper.coordsToString(this.targetPos)];\n    if (canOccupyPosition && tile) {\n      this.entity.pos = this.targetPos;\n      tile.entities.push(this.entity);\n      // this.game.engine.addActorAsPrevious(this.entity);\n      // this.game.engine.addActor(this.entity);\n      this.game.engine.addActorAsNext(this.entity);\n      // this.interrupt = true;\n      // this.game.engine.start(); // BUGGED - should this be used outside of engine?\n      success = true;\n    }\n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    return {\n      success,\n      alternative,\n    };\n  }\n}\n;\n","export const Draggable = superclass => class extends superclass {\n  constructor({ draggable = true, ...args }) {\n    super({ ...args });\n    this.draggable = draggable;\n    this.entityTypes = this.entityTypes.concat('DRAGGABLE');\n  }\n};\n","export const Pushable = superclass => class extends superclass {\n  constructor({ pushable = true, ...args }) {\n    super({ ...args });\n    this.pushable = pushable;\n    this.entityTypes = this.entityTypes.concat('PUSHABLE');\n  }\n};\n","import { destroyEntity } from './helper';\nexport const Destructable = superclass => class extends superclass {\n  constructor({ durability = 1, defense = 0, onDestroy = () => null, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('DESTRUCTABLE');\n    this.durability = durability;\n    this.defense = defense;\n    this.onDestroy = onDestroy;\n  }\n  getDefense() {\n    let defense = this.defense;\n    // add in reducer to get defense stats of all equpiment\n    if (this.entityTypes.includes('EQUIPING')) {\n      this.equipment.forEach((slot) => {\n        if (slot.item) {\n          if (slot.item.entityTypes.includes('DESTRUCTABLE')) {\n            defense += slot.item.getDefense();\n          }\n        }\n      });\n    }\n    return defense;\n  }\n  decreaseDurabilityWithoutDefense(value) {\n    this.durability -= value;\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n  decreaseDurability(value) {\n    const current = this.durability;\n    const newDurability = current - (value - this.getDefense());\n    this.durability = Math.min(current, newDurability);\n    this.renderer.character = this.durability;\n    this.game.draw();\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n  increaseDurability(value) {\n    this.durability += value;\n  }\n  destroy() {\n    this.onDestroy();\n    destroyEntity(this);\n  }\n};\n","export const Burnable = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('BURNABLE');\n    this.canBurn = true;\n    this.willResetCanBurn = false;\n  }\n  resetCanBurn() {\n    this.willResetCanBurn = false;\n    this.canBurn = true;\n  }\n  burn() {\n    if (this.canBurn) {\n      this.decreaseDurability(2);\n      return true;\n    }\n    return false;\n  }\n};\n","import pipe from 'lodash/fp/pipe';\nimport { Entity } from './Entity';\nimport { Parent } from './Parent';\nimport { HasInnerGates } from './HasInnerGates';\nimport { UI } from './UI';\nimport { Attacking } from './Attacking';\nimport { Equipable } from './Equipable';\nimport { Acting } from './Acting';\nimport { Rendering } from './Rendering';\nimport { Containing } from './Containing';\nimport { Equiping } from './Equiping';\nimport { Charging } from './Charging';\nimport { Signing } from './Signing';\nimport { Playing } from './Playing';\nimport { Cloning } from './Cloning';\nimport { DestructiveProjecting } from './DestructiveProjecting';\nimport { DirectionalProjecting } from './DirectionalProjecting';\nimport { DirectionalPushing } from './DirectionalPushing';\nimport { GaseousDestructiveProjecting } from './GaseousDestructiveProjecting';\nimport { Gaseous } from './Gaseous';\nimport { Chasing } from './Chasing';\nimport { RangedChasing } from './RangedChasing';\nimport { Dragging } from './Dragging';\nimport { Draggable } from './Draggable';\nimport { Pushable } from './Pushable';\nimport { Spreading } from './Spreading';\nimport { Destructable } from './Destructable';\nimport { IsParticle } from './IsParticle';\nimport { Speaking } from './Speaking';\nimport { Burnable } from './Burnable';\nimport { Exploding } from './Exploding';\nimport { Helpless } from './Helpless';\n\nexport const UI_Actor = pipe(\n  Acting,\n  Rendering,\n  Playing,\n  UI\n)(Entity);\n\nexport const Actor = pipe(\n  Acting,\n  Rendering\n)(Entity);\n\nexport const Speaker = pipe(\n  Acting,\n  Rendering,\n  Destructable,\n  Speaking,\n  Draggable,\n  Pushable,\n  Burnable,\n  Helpless,\n)(Entity);\n\nexport const Wall = pipe(\n  Rendering,\n  Destructable,\n)(Entity);\n\nexport const Debris = pipe(\n  Rendering,\n  Containing,\n  Draggable,\n  Burnable,\n  Destructable,\n  Exploding,\n  Pushable,\n)(Entity);\n\nexport const MovingWall = pipe(\n  Acting,\n  Rendering,\n  // Pushing,\n  DirectionalPushing,\n  Destructable,\n)(Entity);\n\nexport const Chaser = pipe(\n  Acting,\n  Rendering,\n  Chasing,\n  Destructable\n)(Entity);\n\nexport const Bandit = pipe(\n  Acting,\n  Rendering,\n  Chasing,\n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const RangedBandit = pipe(\n  Acting,\n  Rendering,\n  RangedChasing,\n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const Player = pipe(\n  Acting,\n  Rendering,\n  Dragging,\n  Charging,\n  Signing,\n  Containing,\n  Equiping,\n  Attacking,\n  HasInnerGates,\n  Destructable,\n  Cloning,\n  Playing,\n  Burnable,\n)(Entity);\n\nexport const Weapon = pipe(\n  Rendering,\n  Equipable,\n  Attacking\n)(Entity);\n\nexport const Armor = pipe(\n  Rendering,\n  Equipable,\n  Destructable,\n)(Entity);\n\nexport const DestructiveProjectile = pipe(\n  Acting,\n  Rendering,\n  Attacking,\n  DestructiveProjecting,\n  Destructable\n)(Entity);\n\nexport const DirectionalProjectile = pipe(\n  Acting,\n  Rendering,\n  Attacking,\n  DirectionalProjecting,\n  Destructable\n)(Entity);\n\nexport const DestructiveCloudProjectile = pipe(\n  Acting,\n  Rendering,\n  Attacking,\n  GaseousDestructiveProjecting,\n  Destructable,\n  Gaseous\n)(Entity);\n\nexport const DestructiveCloudProjectileV2 = pipe(\n  Acting,\n  Destructable,\n  Parent,\n)(Entity);\n\nexport const FireSpread = pipe(\n  Acting,\n  Rendering,\n  Destructable,\n  Attacking,\n  Spreading,\n)(Entity);\n\nexport const Particle = pipe(\n  Acting,\n  Rendering,\n  IsParticle,\n)(Entity);\n\nexport const ParticleEmitter = pipe(\n  Acting,\n  Destructable,\n  Parent,\n)(Entity);","export const UI = superclass => class extends superclass {\n  constructor({ initiatedBy = null, range = null, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('UI');\n    this.initiatedBy = initiatedBy;\n    this.active = true;\n    this.range = range;\n  }\n  hasEnoughEnergy() {\n    return this.active;\n  }\n};\n","import { Say } from '../Actions/Say';\n\nexport const Speaking = superclass => class extends superclass {\n  constructor({ messages = ['I have nothing to say.'], messageType, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('SPEAKING');\n    this.messages = messages;\n    this.messageType = messageType;\n  }\n  getAction(game) {\n    const message = this.messages.shift();\n    this.messages.push(message);\n    return new Say({\n      actor: this,\n      game,\n      message: message,\n      messageType: this.messageType,\n      processDelay: 0,\n    });\n  }\n};\n","import SOUNDS from '../sounds';\nimport * as Helper from '../../helper';\n\nexport const Helpless = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('HELPLESS');\n    this.saved = false;\n  }\n  save() {\n    this.saved = true;\n    SOUNDS.save.play();\n  }\n  destroy() {\n    const sound = Helper.getRandomInArray([SOUNDS.scream_0, SOUNDS.scream_1, SOUNDS.scream_2]);\n    sound.play();\n    super.destroy();\n  }\n};\n","import SOUNDS from '../sounds';\nimport { FireSpread } from './index';\nimport * as Constant from '../constants';\nimport * as Helper from '../../helper';\n\nexport const Exploding = superclass => class extends superclass {\n  constructor({ flammability = 1, explosivity = 1, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('EXPLODING');\n    this.flammability = flammability;\n    this.explosivity = explosivity;\n  }\n  enflame() {\n    // create num of fireSpreads\n    const fires = Array(this.flammability).fill('').map((item) => {\n      return new FireSpread({\n        name: 'Pyro',\n        pos: { ...this.pos },\n        game: this.game,\n        renderer: {\n          character: '*',\n          color: Constant.THEMES.SOLARIZED.base3,\n          background: Constant.THEMES.SOLARIZED.red,\n        },\n        timeToSpread: 1,\n        spreadCount: 1,\n        durability: 1,\n        attackDamage: 1,\n        speed: 100,\n      });\n    });\n    fires.forEach((fire) => {\n      // add them to map\n      this.game.placeActorOnMap(fire);\n      // add them to engine\n      this.game.engine.addActor(fire);\n    });\n  }\n  explode() {\n    let structure = {\n      x_offset: 0,\n      y_offset: 0,\n      positions: Array(this.explosivity).fill('').reduce((acc, curr, i) => {\n        return acc.concat(...Helper.getPointsOnCircumference(0, 0, i + 1));\n      }, [])\n    };\n    structure.positions.forEach((slot) => {\n      let position = {\n        x: this.pos.x + slot.x + structure.x_offset,\n        y: this.pos.y + slot.y + structure.y_offset\n      };\n      const tile = this.game.map[Helper.coordsToString(position)];\n      if (tile)\n        tile.type = 'BURNT';\n    });\n    if (this.explosivity > 0)\n      SOUNDS.explosion_0.play();\n    // this.game.draw(); //may not need draw here\n  }\n  destroy() {\n    this.enflame();\n    this.explode();\n    super.destroy();\n  }\n};\n","import * as Constant from '../constants';\nimport { Shove } from '../Actions/Shove';\nimport { DestroySelf } from '../Actions/DestroySelf';\n\nexport const DirectionalPushing = superclass => class extends superclass {\n  constructor({ path = false, direction = { x: 0, y: 0 }, range = 3, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('DIRECTIONAL_PUSHING');\n    this.path = path;\n    this.direction = direction;\n    this.range = range;\n  }\n  getAction(game) {\n    let result = null;\n    let newX = this.pos.x + this.direction[0];\n    let newY = this.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    this.passable = false;\n    if (this.range > 0) {\n      result = new Shove({\n        targetPos: targetPos,\n        direction: this.direction,\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        onSuccess: () => this.range -= 1,\n      });\n    }\n    else {\n      result = new DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: 0\n      });\n    }\n    return result;\n  }\n};\n","import * as Constant from '../constants';\nimport * as Helper from '../../helper'; \nimport { PlaceActor } from '../Actions/PlaceActor';\nimport { Say } from '../Actions/Say';\nimport { Move } from '../Actions/Move';\n\nexport const RangedChasing = superclass => class extends superclass {\n  constructor({ targetEntity = null, getProjectile = () => null, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('RANGED_CHASING');\n    this.targetEntity = targetEntity;\n    this.getProjectile = getProjectile;\n  }\n  targetInPath(pathToCheck, targetPos) {\n    let inPath = false;\n    pathToCheck.forEach((pos) => {\n      if (pos.x === targetPos.x && pos.y === targetPos.y) {\n        inPath = true;\n      }\n    });\n    return inPath;\n  }\n  getAction(game) {\n    let throwDirection = {\n      x: Math.sign(this.targetEntity.pos.x - this.pos.x),\n      y: Math.sign(this.targetEntity.pos.y - this.pos.y),\n    };\n    // projectile.initialize()\n    let projectile = this.getProjectile({\n      pos: {\n        x: this.pos.x,\n        y: this.pos.y,\n      },\n      targetPos: { ...this.targetEntity.pos },\n      direction: [throwDirection.x, throwDirection.y],\n      range: 10,\n    });\n    // projectile.getPath()\n    projectile.createPath(game);\n    // is target in path\n    const inPath = this.targetInPath(projectile.path, this.targetEntity.pos);\n    if (inPath) {\n      // throw\n      if (game.canOccupyPosition(projectile.pos, projectile)) {\n        return new PlaceActor({\n          targetPos: { ...projectile.pos },\n          entity: projectile,\n          game,\n          actor: this,\n          energyCost: Constant.ENERGY_THRESHOLD\n        });\n      }\n      return new Say({\n        message: `I'll get you with this kunai!`,\n        game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD\n      });\n    }\n    // if not, select target tile in range of enemy and move\n    let movePath = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = movePath.length > 0 ? movePath[0] : this.pos;\n    return new Move({\n      targetPos,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n  }\n};\n","import * as Helper from '../../helper'; \n\nexport const Dragging = superclass => class extends superclass {\n  constructor({ draggedEntity = null, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('DRAGGING');\n    this.draggedEntity = draggedEntity;\n  }\n  grab(pos) {\n    const tile = this.game.map[Helper.coordsToString(pos)];\n    if (!tile)\n      return false;\n    if (tile.entities.length > 0) {\n      const entity = tile.entities[0];\n      if (entity.entityTypes.includes('DRAGGABLE'))\n        if (!this.draggedEntity && entity.draggable === true) {\n          this.draggedEntity = entity;\n          return true;\n        }\n    }\n    return false;\n  }\n  release() {\n    if (!this.draggedEntity)\n      return false;\n    const draggedEntity = { ...this.draggedEntity };\n    this.draggedEntity = null;\n    return draggedEntity;\n  }\n  drag(lastPos) {\n    // update entity position\n    const pos = this.draggedEntity.pos;\n    // get tile of draged entity\n    let tile = this.game.map[Helper.coordsToString(pos)];\n    // remove dragged entity from that tile\n    this.game.map[Helper.coordsToString(pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.draggedEntity.id) };\n    // update dragged ent to player's position\n    this.draggedEntity.pos = lastPos;\n    // add dragged ent to new tile\n    this.game.map[Helper.coordsToString(lastPos)].entities.push(this.draggedEntity);\n  }\n  move(targetPos) {\n    const lastPos = { ...this.pos };\n    if (this.draggedEntity) {\n      const moveSuccess = super.move(targetPos);\n      if (moveSuccess) {\n        this.drag(lastPos);\n        return true;\n      }\n      return moveSuccess;\n    }\n    return super.move(targetPos);\n  }\n};\n","export const Charging = superclass => class extends superclass {\n  constructor({ charge = 10, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('CHARGING');\n    this.charge = charge;\n    this.chargeMax = charge;\n  }\n  decreaseCharge(value) {\n    this.charge = Math.max(0, this.charge - value);\n  }\n  increaseCharge(value) {\n    this.charge = Math.min(this.chargeMax, this.charge + value);\n  }\n};\n","export const Signing = superclass => class extends superclass {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('SIGNING');\n    this.signHistory = [];\n  }\n  addSign(sign) {\n    if (this.signHistory.length >= 4) {\n      this.signHistory.shift();\n    }\n    this.signHistory.push(sign);\n  }\n  clearSigns() {\n    this.signHistory = [];\n  }\n};\n","import SOUNDS from '../sounds';\nimport * as Constant from '../constants';\n\nexport const Equiping = superclass => class extends superclass {\n  constructor({ equipment = Constant.EQUIPMENT_LAYOUTS.human(), ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('EQUIPING');\n    this.equipment = equipment;\n  }\n  hasItemNameEquipped(itemName) {\n    const equipment = this.equipment.filter((slot) => {\n      if (slot.item) {\n        if (slot.item.name === itemName) {\n          return true;\n        }\n      }\n      return false;\n    });\n    return equipment.length > 0;\n  }\n  getItemInSlot(slotName) {\n    let openSlots = this.equipment.filter((slot) => {\n      return (slot.item === null && slot.type === slotName);\n    });\n    if (openSlots.length > 0) {\n      return false;\n    }\n    let slot = this.equipment.find((slot) => slot.type === slotName);\n    if (!slot) {\n      return false;\n    }\n    if (!slot.item) {\n      return false;\n    }\n    return slot.item;\n  }\n  equip(slotName, item) {\n    let foundSlot = false;\n    this.equipment = this.equipment.map((slot) => {\n      if (!foundSlot && slot.type === slotName && slot.item === null) {\n        slot.item = item;\n        foundSlot = true;\n        SOUNDS.equip_1.play();\n      }\n      return slot;\n    });\n    return foundSlot;\n  }\n  unequip(item) {\n    this.equipment = this.equipment.map((slot) => {\n      if (slot.item) {\n        if (slot.item.id === item.id) {\n          slot.item = null;\n          SOUNDS.equip_0.play();\n        }\n      }\n      return slot;\n    });\n  }\n};\n","export const HasInnerGates = superclass => class extends superclass {\n  constructor({ currentGate = null, gates = [], ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('HAS_INNER_GATES');\n    this.currentGate = currentGate;\n    this.gates = [\n      {\n        name: 'Gate of Opening',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '1'\n      },\n      {\n        name: 'Gate of Healing',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '2'\n      },\n      {\n        name: 'Gate of Life',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '3'\n      },\n      {\n        name: 'Gate of Pain',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '4'\n      },\n      {\n        name: 'Gate of Limit',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '5'\n      },\n    ];\n  }\n  setNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n      this.currentGate = { ...nextGate };\n    }\n    else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n        this.currentGate = { ...nextGate };\n      }\n    }\n    return nextGate;\n  }\n  getNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n    }\n    else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n      }\n    }\n    return nextGate;\n  }\n};\n","import uuid from 'uuid/v1';\nimport { destroyEntity } from './helper';\nimport { cloneDeep } from 'lodash';\n\nexport const Cloning = superclass => class extends superclass {\n  constructor({ cloneLimit = 1, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('CLONING');\n    this.cloneLimit = cloneLimit;\n    this.clones = [];\n  }\n  // perhaps clones should have a status effect that leeches parent actor's energy or chakra\n  // status effects should be removed from engine when owner is removed.\n  destroy() {\n    // add function to override self destroy funtion \n    // if this actor dies, clones should be destroyed as well\n    if (this.clones) {\n      this.clones.map((clone) => {\n        destroyEntity(clone);\n      });\n    }\n    destroyEntity(this);\n  }\n  destroyClone(id) {\n    // overrides clone destroy function\n    // when clone is destroyed, clone count will change accordingly\n    const index = this.clones.findIndex((c) => c.id === id);\n    if (index >= 0) {\n      this.clones[index].super__destroy();\n      this.clones.splice(index, 1);\n    }\n  }\n  createClone(cloneArgs) {\n    if (this.clones.length < this.cloneLimit) {\n      let clone = cloneDeep(this);\n      clone.name = `Clone`;\n      clone.game = this.game;\n      clone.id = uuid();\n      delete clone.clones;\n      clone['super__destroy'] = clone.destroy;\n      clone.destroy = () => { this.destroyClone(clone.id); };\n      cloneArgs.forEach((arg) => {\n        clone[arg.attribute] = arg.value;\n      });\n      if (this.game.placeActorOnMap(clone)) {\n        this.game.engine.addActorAsNext(clone);\n        this.game.draw();\n        this.clones.push(clone);\n        return true;\n      }\n      ;\n    }\n    return false;\n  }\n};\n","import * as Constant from '../constants';\nimport * as Helper from '../../helper';\nimport { ThrowProjectile } from '../Actions/ThrowProjectile';\n\nexport const DestructiveProjecting = superclass => class extends superclass {\n  constructor({ path = false, targetPos = null, attackDamage = 1, range = 3, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('DESTRUCTIVE_PROJECTING');\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n  createPath(game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let result = new ThrowProjectile({\n      targetPos,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    return result;\n  }\n};\n","import * as Constant from '../constants';\nimport { ProjectileMove } from '../Actions/ProjectileMove';\nimport { DestroySelf } from '../Actions/DestroySelf';\n\nexport const DirectionalProjecting = superclass => class extends superclass {\n  constructor({ path = false, direction = { x: 0, y: 0 }, attackDamage = 1, range = 3, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('DIRECTIONAL_PROJECTING');\n    this.path = path;\n    this.direction = direction;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n  createPath(game) {\n    let path = [];\n    for (let i = 1; i < this.range + 1; i++) {\n      path.push({\n        x: this.pos.x + (this.direction[0] * i),\n        y: this.pos.y + (this.direction[1] * i)\n      });\n    }\n    this.path = path;\n  }\n  getAction(game) {\n    let result = null;\n    let newX = this.pos.x + this.direction[0];\n    let newY = this.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    this.passable = false;\n    if (this.range > 0) {\n      result = new ProjectileMove({\n        targetPos: targetPos,\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        damageToSelf: 1,\n        onSuccess: () => this.range -= 1,\n        onAfter: () => {\n          if (this.energy <= 100) {\n            game.engine.setActorToPrevious();\n          }\n        }\n      });\n    }\n    else {\n      result = new DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: 0\n      });\n    }\n    return result;\n  }\n};\n","import * as Constant from '../constants';\nimport * as Helper from '../../helper';\nimport { ThrowProjectileGas } from '../Actions/ThrowProjectileGas';\n\nexport const GaseousDestructiveProjecting = superclass => class extends superclass {\n  constructor({ owner_id = null, path = false, targetPos = null, attackDamage = 1, range = 3, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('GASEOUS_DESTRUCTIVE_PROJECTING');\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n    this.owner_id = owner_id;\n  }\n  canAttack(entity) {\n    let success = super.canAttack();\n    if (success) {\n      success = this.owner_id === null || (entity.owner_id !== this.owner_id);\n    }\n    return success;\n  }\n  createPath(game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let result = new ThrowProjectileGas({\n      targetPos,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    return result;\n  }\n};\n","import uuid from 'uuid/v1';\nimport { cloneDeep, cloneDeepWith } from 'lodash';\nimport * as Constant from '../constants';\n\nexport const Gaseous = superclass => class extends superclass {\n  constructor({ isClone = false, cloneCount = 0, clonePattern = Constant.CLONE_PATTERNS.square, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('GASEOUS');\n    this.isClone = isClone;\n    this.cloneCount = cloneCount;\n    this.clonePattern = cloneDeep(clonePattern);\n  }\n  getAction(game) {\n    let offset = this.clonePattern.positions.find((pos) => !pos.taken);\n    if (!this.isClone && offset) {\n      offset.taken = true;\n      let clone = cloneDeepWith(this, (value, key) => {\n        switch (key) {\n          case 'id':\n          case 'game':\n          case 'engine':\n          case 'clones':\n            return null;\n          default:\n            return undefined;\n        }\n      });\n      clone.game = game;\n      clone.id = uuid();\n      if (this.hasOwnProperty('pos')) {\n        let referencePos = this.pos;\n        clone.pos = {\n          x: referencePos.x + offset.x,\n          y: referencePos.y + offset.y\n        };\n      }\n      if (clone.hasOwnProperty('path')) {\n        clone.path = clone.path.map((pos) => {\n          return {\n            x: pos.x + offset.x,\n            y: pos.y + offset.y\n          };\n        });\n      }\n      clone.isClone = true;\n      this.cloneCount += 1;\n      game.placeActorOnMap(clone);\n      game.engine.addActor(clone);\n      game.draw();\n    }\n    let result = super.getAction(game);\n    return result;\n  }\n};\n","import { FireSpread } from './index';\nimport * as Constant from '../constants';\nimport * as Helper from '../../helper'; \nimport { Say } from '../Actions/Say';\nimport { DestroySelf } from '../Actions/DestroySelf';\nimport { PlaceActor } from '../Actions/PlaceActor';\n\nexport const Spreading = superclass => class extends superclass {\n  constructor({ timeToSpread = 5, spreadCount = 1, ...args }) {\n    super({ ...args });\n    this.entityTypes = this.entityTypes.concat('SPREADING');\n    this.timeToSpreadMax = timeToSpread;\n    this.timeToSpread = timeToSpread;\n    this.spreadCountMax = spreadCount;\n    this.spreadCount = spreadCount;\n  }\n  getAction(game) {\n    // if no more spreads, then destroy\n    if (this.spreadCount <= 0) {\n      return new DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n        onAfter: () => {\n          game.map[Helper.coordsToString(this.pos)].type = 'BURNT';\n        },\n      });\n    }\n    // if its time to expand again, create a new fire spread and placeActor\n    if (this.timeToSpread <= 0) {\n      // find adjacent spot to spread to\n      let adjacentPositions = [\n        {\n          x: this.pos.x + 1,\n          y: this.pos.y + 0,\n        },\n        {\n          x: this.pos.x + -1,\n          y: this.pos.y + 0,\n        },\n        {\n          x: this.pos.x + 0,\n          y: this.pos.y + 1,\n        },\n        {\n          x: this.pos.x + 0,\n          y: this.pos.y + -1,\n        },\n      ];\n      let adjacentPos = null;\n      let kill = 100;\n      while (kill > 0) {\n        let newPos = Helper.getRandomInArray(adjacentPositions);\n        let newTile = this.game.map[Helper.coordsToString(newPos)];\n        let tileExists = Boolean(newTile);\n        let notBurnt = true;\n        let canBurn = false;\n        if (newTile) {\n          notBurnt = newTile.type !== 'BURNT';\n          canBurn = ['WALL', 'FLOOR', 'DOOR'].includes(newTile.type);\n        }\n        if (tileExists && notBurnt && canBurn) {\n          adjacentPos = newPos;\n          break;\n        }\n        kill -= 1;\n      }\n      if (adjacentPos) {\n        // create new fire actor and place\n        let fire = new FireSpread({\n          name: 'Pyro',\n          pos: { x: 0, y: 0 },\n          game,\n          renderer: {\n            character: '*',\n            sprite: '',\n            color: Constant.THEMES.SOLARIZED.base3,\n            background: Constant.THEMES.SOLARIZED.red,\n          },\n          timeToSpread: this.timeToSpreadMax,\n          spreadCount: this.spreadCountMax,\n          durability: this.durability,\n          attackDamage: this.attackDamage,\n          speed: this.speed,\n        });\n        this.timeToSpread = this.timeToSpreadMax;\n        this.spreadCount -= 1;\n        return new PlaceActor({\n          targetPos: adjacentPos,\n          entity: fire,\n          game,\n          actor: this,\n          interrupt: false,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n          forcePlacement: true,\n        });\n      }\n      this.timeToSpread = this.timeToSpreadMax;\n      this.spreadCount -= 1;\n    }\n    this.timeToSpread -= 1;\n    return new Say({\n      message: 'burning',\n      game,\n      actor: this,\n      processDelay: 0,\n    });\n  }\n};\n","import * as Constant from '../constants'; \n\nexport const IsParticle = superclass => class extends superclass {\n  constructor({ pos = { x: 1, y: 1 }, direction = { x: 0, y: 0 }, life = 1, speed = 1, type = Constant.PARTICLE_TYPE.directional, path = null, ...args }) {\n    super({ ...args });\n    this.pos = pos;\n    this.direction = direction;\n    this.life = life;\n    this.speed = speed;\n    this.type = type;\n    this.path = path;\n    this.entityTypes = this.entityTypes.concat('PARTICLE');\n  }\n  getNextPos(step) {\n    switch (this.type) {\n      case Constant.PARTICLE_TYPE.directional:\n        return {\n          x: this.pos.x + (this.direction.x * this.speed) * step,\n          y: this.pos.y + (this.direction.y * this.speed) * step,\n        };\n      case Constant.PARTICLE_TYPE.path:\n        const nextPos = this.path.shift();\n        return nextPos ? { ...nextPos } : { ...this.pos };\n      default:\n        break;\n    }\n  }\n  update(step) {\n    this.life -= step;\n    if (this.life > 0) {\n      this.pos = this.getNextPos(step);\n    }\n  }\n};\n","import * as Helper from '../../helper';\nimport { Particle } from '../Entities/index';\nimport { PARTICLE_TEMPLATES } from '../constants';\n\nexport class Engine {\n  constructor({\n    statusEffects = [],\n    actors = [],\n    currentActor = 0,\n    isRunning = false,\n    game = null,\n  }) {\n    this.statusEffects = statusEffects;\n    this.actors = actors;\n    this.currentActor = currentActor;\n    this.isRunning = isRunning;\n    this.game = game;\n  }\n\n  async processV1 () { // a turn-based system using speed and round-robin\n    let actor = this.actors[this.currentActor]\n    actor.gainEnergy(actor.speed);\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      while (true) {\n        let result = action.perform();\n        this.game.draw();\n        await Helper.delay(action.processDelay);\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async processV2() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (!actor) return false;\n      // if (!actor.active) return false;\n      if (!actor.active) break;\n      let timePassed = 0;\n      if (actor.hasEnoughEnergy()) {\n        // if (!actor.active) break;\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        timePassed += action.energyCost;\n        while (true) {\n          action.onBefore();\n          let result = await action.perform();\n          if (result.success) {\n            action.onSuccess();\n          } else {\n            action.onFailure();\n          }\n          action.onAfter();\n          if (!await this.processActionFX(action, result.success)) {\n            if (this.shouldAutoRun()) {\n              await Helper.delay(25);\n            } else {\n              await Helper.delay(action.processDelay);\n            }\n            this.game.draw();\n          }\n          if (!actor.active) break;\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n        this.processStatusEffects(timePassed);\n        if (action.interrupt) {\n          acting = false;\n          break;\n        }\n      } else {\n        actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    this.actors = this.actors.filter((actor) => actor.active)\n    this.currentActor += 1;\n    if (this.currentActor >= this.actors.length) {\n      this.currentActor = 0;\n    }\n    return true\n  }\n\n  // a turn-based system using speed and Action Points\n  // it reorders all actors by energy after every round robin\n  async processV3() { \n    let actor = this.actors[this.currentActor]\n    if (!actor) return false;\n    let timePassed = 0;\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      timePassed += action.energyCost;\n      while (true) {\n        let result = await action.perform();\n        if (!await this.processActionFX(action, result.success)) {\n            await Helper.delay(action.processDelay);\n            this.game.draw();\n        }\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n      this.processStatusEffects(timePassed);\n    } else {\n      actor.gainEnergy(actor.speed);\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    if (this.currentActor === 0) this.sortActorsByEnergy();\n    return true\n  }\n\n  // TODO process that reorders actors after every action\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.processV2();\n    }\n    let actor = this.actors[this.currentActor]\n    \n    if (!actor) {\n      // this.game.backToTitle();\n      return false;\n    }\n    \n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n  \n  stop() {\n    this.isRunning = false;\n  }\n\n  sortActorsByEnergy () {\n    this.actors = this.actors.sort((a, b) => b.energy - a.energy);\n  }\n\n  shouldAutoRun () {\n  // if there is no player, the engine will continue to run, we don't want it to run too fast\n    const hasPlayer = this.actors.filter((actor) => actor.entityTypes.includes('PLAYING')).length\n    if (hasPlayer) return false;\n    return true;\n  }\n\n  addStatusEffect(newEffect) {\n    if (!newEffect.allowDuplicates) {\n      if (this.statusEffects.filter((effect) => (\n        effect.actor.id === newEffect.actor.id &&\n        effect.name === newEffect.name\n      )).length > 0) {\n        console.log(`${newEffect.name} cannot be applied twice to ${newEffect.actor.name}`);\n        return false;\n      };\n    }\n    newEffect.onStart();\n    this.statusEffects.push(newEffect)\n    return true;\n  }\n\n  removeStatusEffectById (id) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.id !== id) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n  \n  removeStatusEffectByActorId (actorId) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.actor.id !== actorId) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n\n  removeDeadStatusEffects() {\n    this.statusEffects = this.statusEffects.filter((effect) =>{\n      if (effect.lifespan >= 0 && effect.timeToLive <= 0) {\n        effect.onStop();\n        return false;\n      }\n      return true;\n    });\n  }\n\n  processStatusEffects (timePassed) {\n    this.statusEffects.forEach((effect) => {\n      effect.timeSinceLastStep += timePassed;\n      effect.timeToLive -= timePassed;\n      if (effect.timeSinceLastStep >= effect.stepInterval) {\n        effect.onStep();\n        effect.timeSinceLastStep = 0;\n      } \n    });\n    this.removeDeadStatusEffects();\n  }\n\n  async processActionFX (action, actionSuccess) {\n    // EASE IN\n    // let time = .8\n    // let nextT = (t) => t *= t; \n    // EASE OUT\n    // let time = .03\n    // let nextT = (t) => t * (2 - t); \n    // EASE IN OUT QUAD\n    // let time = .4\n    // let nextT = (t) => t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; \n    // EASE IN CUBIC\n    // let time = .8\n    // let nextT = (t) => t * t * t; \n    // EASE OUT CUBIC\n    // let time = .001\n    // let nextT = (t) => (--t) * t * t + 1; \n    if (!actionSuccess) { \n      // If action is not successful, instead of running action's normal particle animation\n      // we'll show a red X on the entity that initiated the action\n      const particle = new Particle({\n        game: this.game,\n        name: 'particle',\n        passable: true,\n        pos: {...action.actor.pos},\n        renderer: PARTICLE_TEMPLATES.fail.renderer,\n      })\n      this.game.placeActorOnMap(particle);\n      this.game.draw();\n      await Helper.delay(100);\n      this.game.removeActorFromMap(particle);\n      particle.update(1);\n      this.game.draw();\n      action.removeDeadParticles(); // is this needed?\n      return true;\n    }\n\n    if (action.particles.length) {\n      while (action.particles.length > 0) {\n        action.particles.forEach((particle) => {\n          this.game.placeActorOnMap(particle);\n        })\n        this.game.draw();\n        // await Helper.delay(time * 100);\n        // await Helper.delay(time * action.processDelay);\n        await Helper.delay(action.processDelay);\n        // await Helper.delay(0);\n        action.particles.forEach((particle) => {\n          this.game.removeActorFromMap(particle);\n          particle.update(1);\n\n        })\n        this.game.draw();\n        action.removeDeadParticles();\n        // time = nextT(time);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  addActor (entity) {\n    this.actors.push(entity);\n  }\n\n  addActorAsPrevious (entity) {\n    this.actors.splice(this.currentActor, 0, entity);\n  }\n\n  addActorAsNext (entity) {\n    this.actors.splice(this.currentActor + 1, 0, entity);\n  }\n\n  setActorToPrevious (entity) {\n    this.currentActor -= 1;\n    if (this.currentActor <= -1) this.currentActor = this.actors.length - 1;\n  }\n\n  setActorToNext (entity) {\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n  }\n\n}\n\n\nexport class CrankEngine extends Engine {\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        while (true) {\n          this.game.draw();\n          let result = await action.perform();\n          await Helper.delay(action.processDelay);\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n      } else {\n        // actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    // this.currentActor = (this.currentActor + 1) % this.actors.length;\n    this.currentActor += 1;\n    if (this.currentActor + 1 >= this.actors.length) {\n      this.currentActor = 0;\n      this.actors.forEach((actor) => actor.gainEnergy(actor.speed));\n      return false;\n    }\n    return true\n  }\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.process();\n    }\n    let actor = this.actors[this.currentActor]\n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    // this.game.updateMode();\n    this.game.mode.update();\n    await this.game.updateReact(this.game);\n  }\n}","import Konva from 'konva';\nimport uuid from 'uuid/v1';\nimport * as Helper from '../../helper';\n\nexport const ANIMATION_TYPES = {\n  DEFAULT: 0,\n  BLINK_TILE: 1,\n  SOLID_TILE: 2,\n}\n\nclass Animation {\n  constructor({display}) {\n    const id = uuid();\n    this.id = id;\n    this.lifeTime = 0;\n    this.active = true;\n    this.display = display;\n    this.node = null;\n  }\n\n  getActive () {\n    return false;\n  }\n\n  initialize () {\n    return;\n  }\n\n  update (frame) {\n    this.lifeTime += frame.timeDiff;\n    this.active = this.getActive();\n    if (!this.active) {\n      this.display.removeAnimation(this.id);\n    }\n  }\n}\n\nclass ExampleAnimation extends Animation {\n  constructor({...args}) {\n    super({...args})\n  }\n\n  getActive () {\n    if (this.lifeTime > 500) {\n      return false;\n    }\n    return true;\n  }\n}\n\nclass BlinkTile extends Animation {\n  constructor({\n    x,\n    y,\n    lerpDirection = -1,\n    color = '#fff',\n    ...args\n  }) {\n    super({ ...args });\n    this.x = x;\n    this.y = y;\n    this.lerpDirection = lerpDirection;\n    this.color = color;\n  }\n\n  getActive () {\n    return this.active;\n  }\n\n  initialize () {\n    this.active = true;\n    let rect = new Konva.Rect({\n      name: 'rect',\n      x: (this.display.tileWidth * this.x) + (this.display.tileOffset + this.display.tileGutter),\n      y: (this.display.tileHeight * this.y) + (this.display.tileOffset + this.display.tileGutter),\n      offsetX: this.display.tileWidth / -4,\n      offsetY: this.display.tileHeight / -4,\n      width: this.display.tileWidth / 2,\n      height: this.display.tileHeight / 2,\n      fill: this.color,\n      strokeEnabled: false,\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n    this.display.animationLayer.add(rect);\n    this.node = rect;\n    super.initialize();\n  }\n\n  update (frame) {\n    let opacity = this.node.opacity();\n    if (opacity >= 1) this.lerpDirection = -1;\n    if (opacity <= 0) this.lerpDirection = 1;\n    opacity += (0.05 * this.lerpDirection)\n    this.node.opacity(Helper.clamp(opacity, 0, 1))\n    super.update(frame);\n  }\n  \n}\n\nexport class Display {\n  constructor({\n    containerId = null,\n    width = 100,\n    height = 100,\n    tileWidth = 10,\n    tileHeight = 10,\n    tileGutter = 0,\n    tileOffset = 10,\n    game = null,\n  }) {\n    this.containerId = containerId;\n    this.width = width;\n    this.height = height;\n    this.tilesWide = this.getTilesWide(width, tileOffset, tileWidth);\n    this.tilesHigh = this.getTilesHigh(height, tileOffset, tileHeight);\n    this.tileWidth = tileWidth;\n    this.tileHeight = tileHeight;\n    this.tileGutter = tileGutter;\n    this.tileOffset = tileOffset;\n    this.stage = null;\n    this.layer = null;\n    this.animationLayer = null;\n    this.animations = [];\n    this.animationLoop = null;\n    this.game = game;\n  }\n\n  initialize (document) {\n    let d = document.getElementById(this.containerId)\n    let displayContainer = document.createElement('div');\n    d.appendChild(displayContainer);\n\n    this.stage = new Konva.Stage({\n      container: 'display',   // id of container <div>\n      width: this.width,\n      height: this.height\n    });\n\n    // setting up main tile map layer\n    this.layer = new Konva.Layer({\n      hitGraphEnabled: false,\n    });\n    this.stage.add(this.layer);\n    \n    // setting up animation layer\n    this.animationLayer = new Konva.Layer({});\n    this.stage.add(this.animationLayer);\n    let animationLoop = new Konva.Animation((frame) => {\n      this.animations.forEach((animation) => animation.update(frame))\n      // Stop animation updates if no animations to process\n      if (this.animations.length <= 0) {\n        if (this.animationLoop) {\n          if (this.animationLoop.isRunning()) {\n            this.animationLoop.stop();\n          }\n        }\n      }\n    }, this.animationLayer);\n    this.animationLoop = animationLoop;\n    animationLoop.start();\n  }\n\n  addAnimation (type, args) {\n    let animation;\n    switch (type) {\n      case ANIMATION_TYPES.DEFAULT:\n        animation = new Animation({display: this, ...args})\n        break;\n      case ANIMATION_TYPES.SOLID_TILE:\n        animation = new ExampleAnimation({display: this, ...args})\n        break;\n      case ANIMATION_TYPES.BLINK_TILE:\n        animation = new BlinkTile({display: this, ...args})\n        break;\n      \n      default:\n        animation = new Animation({ display: this, ...args})\n        break;\n    }\n    animation.initialize();\n    this.animations.push(animation)\n    if (!this.animationLoop.isRunning()) this.animationLoop.start();\n    return animation\n  }\n\n  removeAnimation (id) {\n    this.animations = this.animations.filter((anim) => {\n      if (anim.id !== id) return true;\n      // if anim is being removed, remove associated nodes and shapes too\n      anim.node.destroy();\n      return false;\n    });\n    \n  }\n\n  updateTile(tile, character, foreground, background) {\n    // child[0] is the rectangle\n    // child[1] is the text\n    if (tile) {\n      tile.children[0].fill(background);\n      tile.children[1].fill(foreground);\n      tile.children[1].text(character);\n    }\n  }\n\n  createTile(x, y, character, foreground, background, layer = 'layer') {\n    let node = new Konva.Group({\n      id: `${x},${y}`,\n      x: (this.tileWidth * x) + (this.tileOffset + this.tileGutter),\n      y: (this.tileHeight * y) + (this.tileOffset + this.tileGutter),\n      width: this.tileWidth,\n      height: this.tileHeight,\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n\n    let rect = new Konva.Rect({\n      name: 'rect',\n      width: this.tileWidth,\n      height: this.tileHeight,\n      fill: background,\n      strokeEnabled: false,\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n\n    let text = new Konva.Text({\n      name: 'text',\n      text: character,\n      width: this.tileWidth,\n      height: this.tileHeight,\n      fontSize: 24,\n      fontFamily: 'scroll-o-script',\n      fill: foreground,\n      align: 'center',\n      verticalAlign: 'middle',\n      // for optimization\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      listening: false,\n      shadowForStrokeEnabled: false,\n    });\n\n    node.add(rect);\n    node.add(text);\n    this.layer.add(node);\n    return node;\n  }\n\n  getAbsoultueX(x) {\n    return (this.tileWidth * x) + (this.tileOffset + this.tileGutter)\n  }\n\n  getAbsoultueY(y) {\n    return (this.tileWidth * y) + (this.tileOffset + this.tileGutter)\n  }\n\n  getTilesWide (width, tileOffset, tileWidth) {\n    return Math.floor((width - tileOffset) / tileWidth)\n  }\n  \n  getTilesHigh(height, tileOffset, tileHeight) {\n    return Math.floor((height - tileOffset) / tileHeight)\n  }\n\n  getTilesAcrossOnScreen () { return Math.floor(this.width / this.tileWidth)}\n  getTilesDownOnScreen () { return Math.floor(this.height / this.tileHeight)}\n\n  draw () {\n    this.layer.batchDraw();\n  }\n}","import uuid from 'uuid/v1';\n\nexport class Mode {\n  constructor({\n    game = null,\n    data = {},\n  }) {\n    let id = uuid();\n    this.id = id;\n    this.game = game;\n    this.data = data;\n  }\n\n  initialize() {}\n\n  update() {}\n\n}","import * as Constant from './constants';\nimport {\n  DestructiveCloudProjectileV2,\n  DestructiveProjectile,\n  DirectionalProjectile,\n  MovingWall,\n  DestructiveCloudProjectile,\n  Weapon,\n  Armor,\n} from './Entities/index';\n\nexport const TYPE = {\n  KUNAI: 'Kunai',\n  DIRECTIONAL_KUNAI: 'Directional Kunai',\n  SWORD: 'Sword',\n  AXE: 'Axe',\n  ARMOR: 'Armor',\n  WATER_GUN: 'Water Gun',\n  BARRIER: 'Barrier',\n}\n\nconst createProjectileCloud = ({ \n  engine, \n  actor, \n  targetPos, \n  throwDirection,\n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: actor.pos.x + slot.x + (throwDirection.x * structure.x_offset),\n      y: actor.pos.y + slot.y + (throwDirection.y * structure.y_offset)\n    }\n    \n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n  })\n\n  return new DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileSingularity = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + slot.x + structure.x_offset,\n      y: targetPos.y + slot.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x,\n      y: targetPos.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileBurst = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + structure.x_offset,\n      y: targetPos.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nexport const sandTomb = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileSingularity({\n  engine,\n  actor,\n  targetPos,\n  speed: 100,\n  structureType: 'circle',\n  createProjectile: sandTombPart,\n})\n\nexport const sandBurst = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileBurst({\n  engine,\n  actor,\n  targetPos,\n  speed: 500,\n  structureType: 'circle',\n  createProjectile: sandTombPart,\n})\n\nexport const sandWallPulse = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'smallSquare',\n  createProjectile: movingSandWall,\n})\n\nexport const kunaiCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: kunai,\n})\n\nexport const fireballCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: fireball,\n})\n\nexport const kunai = (engine, pos, targetPos) => new DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    character: '>',\n    color: 'white',\n    background: '',\n    animation: [\n      { background: '', foreground: 'white', character: '>', },\n      { background: '', foreground: 'white', character: 'v', },\n      { background: '', foreground: 'white', character: '<', },\n      { background: '', foreground: 'white', character: '^', },\n      { background: '', foreground: 'white', character: '>', },\n    ],\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const directionalKunai = (engine, pos, direction, range) => new DirectionalProjectile({\n  game: engine.game,\n  direction,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    character: '>',\n    color: 'white',\n    background: '',\n    animation: [\n      { background: 'lightgrey', foreground: 'grey', character: '>', },\n      { background: 'lightgrey', foreground: 'grey', character: 'v', },\n      { background: 'lightgrey', foreground: 'grey', character: '<', },\n      { background: 'lightgrey', foreground: 'grey', character: '^', },\n      { background: 'lightgrey', foreground: 'grey', character: '>', },\n    ],\n  },\n  name: TYPE.DIRECTIONAL_KUNAI,\n  speed: 600,\n  energy: 0,\n  range,\n})\n\nexport const movingSandWall = (engine, pos, targetPos, range) => new MovingWall({\n  game: engine.game,\n  passable: false,\n  pos: { x: pos.x, y: pos.y },\n  targetPos,\n  renderer: {\n    // character: '>',\n    character: ']',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  // name: TYPE.BARRIER,\n  durability: 3,\n  range,\n  speed: 300,\n})\n\nexport const sandShuriken = (engine, pos, direction, range) => new DirectionalProjectile({\n  game: engine.game,\n  direction,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.DIRECTIONAL_KUNAI,\n  speed: 600,\n  energy: 0,\n  range,\n})\n\nexport const sandTombPart = (engine, pos, targetPos) => new DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireball = (engine, pos, targetPos) => new DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🔥',\n    color: 'wheat',\n    background: 'tomato',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireballGas = (engine, actor, targetPos) => {\n  return new DestructiveCloudProjectile({\n    game: engine.game,\n    owner_id: actor ? actor.id : null,\n    targetPos,\n    passable: true,\n    pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n    renderer: {\n      // character: '@',\n      character: '🔥',\n      color: 'wheat',\n      background: 'tomato',\n    },\n    name: TYPE.KUNAI,\n    speed: 100,\n    range: 10,\n    clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n    // clonePattern: Constant.CLONE_PATTERNS.square,\n  })\n}\n\nexport const waterball = (engine, actor, targetPos) => new DestructiveCloudProjectile({\n  game: engine.game,\n  owner_id: actor ? actor.id : null,\n  targetPos,\n  passable: true,\n  pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n  renderer: {\n    // character: '~',\n    character: '🌊',\n    color: 'silver',\n    background: 'lightslategrey',\n  },\n  name: TYPE.KUNAI,\n  speed: 800,\n  range: 10,\n  clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n  // clonePattern: Constant.CLONE_PATTERNS.square,\n})\n\nexport const sword = (engine) => new Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n})\n\nexport const axe = (engine) => new Weapon({\n  game: engine.game,\n  name: TYPE.AXE,\n  passable: true,\n  attackDamage: 5,\n  equipmentType: Constant.EQUIPMENT_TYPES.GENERIC,\n  renderer: {\n    character: 'a',\n    sprite: '',\n    color: 'white',\n    background: '',\n  },\n})\n\nexport const waterGun = (engine) => new Weapon({\n  game: engine.game,\n  name: TYPE.WATER_GUN,\n  passable: true,\n  attackDamage: 0,\n  equipmentType: Constant.EQUIPMENT_TYPES.GENERIC,\n  renderer: {\n    character: 'w',\n    sprite: '',\n    color: Constant.THEMES.SOLARIZED.blue,\n    background: '',\n  },\n})\n\nexport const fireJacket = (engine) => new Armor({\n  game: engine.game,\n  name: 'Fire Jacket',\n  passable: true,\n  defense: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.GENERIC,\n  renderer: {\n    character: 'J',\n    sprite: '',\n    color: Constant.THEMES.SOLARIZED.magenta,\n    background: '',\n  },\n})\n\nexport const test = (engine, pos) => new Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  pos,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: 'lightsteelblue',\n  },\n})\n","import * as Constant from '../constants';\nimport * as Helper from '../../helper';\n\nexport const addTileZone = (origin = { x: 0, y: 0 }, height = 3, width = 3, type = 'GROUND', map, mapHeight, mapWidth) => {\n  for (let i = 0; i < mapHeight; i++) {\n    for (let j = 0; j < mapWidth; j++) {\n      if (i >= origin.y && i <= origin.y + (height - 1) && j >= origin.x && j <= origin.x + (width - 1)) {\n        const key = `${j},${i}`\n        let currentFrame = 0;\n\n        if (Constant.TILE_KEY[type].animation) {\n          currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n        }\n\n        map[key] = {\n          type,\n          currentFrame,\n          entities: [],\n        };\n      }\n    }\n  }\n}","import * as Helper from '../../helper';\n\nexport const generate = (map, offsetX, offsetY, unitCount = 12, unitSize = 4, borderWidth = 1) => {\n  let data = {};\n  // const floorPlan = createFloorPlan(unitCount);\n  // let maxX = 0; \n  // let minX = 0; \n  // let maxY = 0; \n  // let minY = 0; \n  // floorPlan.forEach((pos) => {\n  //   if (pos.x > maxX) maxX = pos.x;\n  //   if (pos.x < minX) minX = pos.x;\n  //   if (pos.y > maxY) maxY = pos.y;\n  //   if (pos.y < minY) minY = pos.y;\n  // })\n  // const floorPlanWidth = Math.abs(maxX) + Math.abs(minX) + 1;\n  // const floorPlanHeight = Math.abs(maxY) + Math.abs(minY) + 1;\n  // console.log(floorPlanWidth);\n  // console.log(floorPlanHeight);\n  \n  let floorPlan = createFloorPlan();\n  let kill = 1000\n  while (floorPlan.length < unitCount + 1) {\n    \n    let unit = createRoomInFloorPlan(floorPlan);\n    if (unit) {\n      const unitPosition = getUnitPosition(unit, offsetX, offsetY, unitSize);\n      let didCreate = createUnit(map, unitPosition, unitSize, 0);\n      if (didCreate) floorPlan.push(unit);\n    }\n    \n    kill -= 1;\n    if (kill <= 0) break;\n  }\n  \n  removeInnerWalls(map)\n  addInnerWalls(map, floorPlan.length)\n  return data;\n}\n\nconst createFloorPlan = () => {\n  // create origin\n  let floorPlan = [{x: 0, y: 0}];\n  return floorPlan\n}\n\nconst createRoomInFloorPlan = (floorPlan) => {\n  // randomly choose previously created unit\n  // let origin = floorPlan[floorPlan.length - 1];\n  let origin = Helper.getRandomInArray(floorPlan);\n  // randomly choose neighboring point\n  let newUnit = getNeighboringUnit(origin);\n  let unitAlreadyExists = unitExists(newUnit, floorPlan)\n  let kill = 1000\n  while (unitAlreadyExists) {\n    origin = Helper.getRandomInArray(floorPlan.filter((pnt) => !Helper.coordsAreEqual(pnt, origin)));\n    newUnit = getNeighboringUnit(origin);\n    unitAlreadyExists = unitExists(newUnit, floorPlan)\n    kill -= 1;\n    if (kill <= 0) {\n      unitAlreadyExists = false;\n      newUnit = false;\n      break;\n    }\n  }\n  \n  return newUnit\n}\n\nconst getNeighboringUnit = (origin) => Helper.getRandomInArray(getNeighboringPoints(origin))\nconst unitExists = (newUnit, existingUnits) => existingUnits.filter((unit) => unit.x === newUnit.x && unit.y === newUnit.y).length > 0;\nconst getUnitPosition = (floorPlanPos, mapOffsetX, mapOffsetY, unitSize) => {\n  return {\n    x: floorPlanPos.x + mapOffsetX + (unitSize * floorPlanPos.x),\n    y: floorPlanPos.y + mapOffsetY + (unitSize * floorPlanPos.y),\n  }\n}\n\nconst getNeighboringPoints = (origin, eightWay = false) => {\n  let neighbors = [\n    {\n      x: origin.x,\n      y: origin.y + 1\n    },\n    {\n      x: origin.x + 1,\n      y: origin.y\n    },\n    {\n      x: origin.x,\n      y: origin.y - 1\n    },\n    {\n      x: origin.x - 1,\n      y: origin.y\n    },\n  ]\n\n  if (eightWay) {\n    neighbors = neighbors.concat([\n      {\n        x: origin.x + 1,\n        y: origin.y + 1\n      },\n      {\n        x: origin.x + 1,\n        y: origin.y - 1\n      },\n      {\n        x: origin.x - 1,\n        y: origin.y - 1\n      },\n      {\n        x: origin.x - 1,\n        y: origin.y + 1\n      },\n    ])\n  }\n  return neighbors;\n}\n\nconst createUnit = (map, position, size, border) => {\n  // const length = size; // this will leave a border\n  // const length = size + 1; // this will close the gap\n  const length = size + 1 - border; // this will calculate using border\n\n  // prevent units from hitting map edge\n  let unitCollidesWithEdge = false;\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < length; j++) {\n      const newPosition = {\n        x: position.x + i,\n        y: position.y + j,\n      }\n      let tile = map[Helper.coordsToString(newPosition)];\n      if (!tile) unitCollidesWithEdge = true;\n    }\n  }\n\n  if (!unitCollidesWithEdge) {\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < length; j++) {\n        const newPosition = {\n          x: position.x + i,\n          y: position.y + j,\n        }\n        let type = 'FLOOR';\n        if (i === 0 || i === (length - 1)) type = 'WALL';\n        if (j === 0 || j === (length - 1)) type = 'WALL';\n        let tile = map[Helper.coordsToString(newPosition)];\n        if (tile) tile.type = type;\n      }\n    }\n  }\n\n  return !unitCollidesWithEdge;\n}\n\nconst removeInnerWalls = (map) => {\n  let walls = Object.keys(map).filter((key) => {\n    return map[key].type === 'WALL';\n  })\n\n  let innerWalls = walls.filter((key) => {\n    const coordArray = key.split(',').map((i) => parseInt(i));\n    const coords = {\n      x: coordArray[0],\n      y: coordArray[1],\n    }\n    const neighbors = getNeighboringPoints(coords, true).filter((point) => {\n      let t = map[Helper.coordsToString(point)];\n      if (t) {\n        if (['WALL', 'FLOOR'].includes(t.type)) {\n          return true;\n        }\n      }\n      return false\n    });\n    \n    if (neighbors.length === 8) {\n      return true;\n    }\n    return false;\n  })\n\n  innerWalls.forEach((key) => {\n    map[key].type = 'FLOOR';\n  })\n}\n\nconst addInnerWalls = (map, count = 2) => {\n  // Finding corners\n  let corners = Object.keys(map).filter((key) => {\n    const tile = map[key];\n    if (tile.type !== 'WALL') return false;\n    const coordArray = key.split(',').map((i) => parseInt(i));\n    const coords = {\n      x: coordArray[0],\n      y: coordArray[1],\n    }\n    const neighbors = getNeighboringPoints(coords, false).filter((point) => {\n      let t = map[Helper.coordsToString(point)];\n      if (t) {\n        if (['GROUND'].includes(t.type)) {\n          return true;\n        }\n      }\n      return false\n    });\n    if (neighbors.length === 2) return true;\n    return false\n  })\n\n  // building walls\n  let wallCount = 0;\n  while (wallCount < count) {\n  // while (wallCount < corners.length) {\n  // for (let i = 0; i < count; i++) {\n    const corner = Helper.getRandomInArray(corners);\n    const coordArray = corner.split(',').map((i) => parseInt(i));\n    const coords = {\n      x: coordArray[0],\n      y: coordArray[1],\n    }\n    const wallNeighbors = getNeighboringPoints(coords, false).filter((point) => {\n      let t = map[Helper.coordsToString(point)];\n      if (t) {\n        if (['WALL'].includes(t.type)) {\n          return true;\n        }\n      }\n      return false\n    });\n    const selectedWallPos = Helper.getRandomInArray(wallNeighbors)\n    if (!selectedWallPos) continue;\n    const direction = {\n      x: Math.sign(selectedWallPos.x - coords.x),\n      y: Math.sign(selectedWallPos.y - coords.y)\n    };\n\n    let kill = 100;\n    let build = true;\n    let currentPosition = {...coords}\n    let previousFloorPositions = [];\n    while (build) {\n      currentPosition.x += direction.x;\n      currentPosition.y += direction.y;\n      let tile = map[Helper.coordsToString(currentPosition)];\n      if (!tile) break;\n      // if (tile.type === 'WALL') continue;\n      if (tile.type === 'FLOOR') {\n        tile.type = 'WALL';\n        previousFloorPositions.push({...currentPosition})\n        // console.log(previousFloorPositions.length);\n        \n      } else if (tile.type === 'GROUND' || (tile.type === 'WALL' && previousFloorPositions.length)) {\n        // go back two and make FLOOR\n        let prevPos = {\n          x: currentPosition.x - (direction.x * 2),\n          y: currentPosition.y - (direction.y * 2),\n        }\n        map[Helper.coordsToString(prevPos)].type = 'DOOR';\n        // map[Helper.coordsToString(prevPos)].type = 'FLOOR';\n        // go back one more and make FLOOR\n        prevPos = {\n          x: currentPosition.x - (direction.x * 3),\n          y: currentPosition.y - (direction.y * 3),\n        }\n        map[Helper.coordsToString(prevPos)].type = 'DOOR';\n        // map[Helper.coordsToString(prevPos)].type = 'FLOOR';\n        if (previousFloorPositions.length <= 0) {\n          //   // we need to create another wall, this one is bust\n          if (count <= 100) count += 1\n        }\n        break;\n      }\n      kill -= 1;\n      if (kill <= 0) build = false;\n    }\n    wallCount += 1;\n  }\n}","import * as Constant from '../constants';\nimport * as Helper from '../../helper';\nimport * as Item from '../items';\nimport * as MapHelper from '../Maps/helper';\nimport { generate as generateBuilding } from '../Maps/generator';\nimport { FireSpread, Speaker, Debris } from '../Entities/index';\nimport { MESSAGE_TYPE } from '../message';\nimport { Mode } from './default';\nimport SOUNDS from '../sounds';\n\nexport class Flume extends Mode {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.data = {\n      level: 1,\n      highestLevel: null,\n      fireIntensity: 1, // increase this number to increase fire spread\n      npcCount: 1,\n      debrisCount: 4,\n      mediumDebrisCount: 3,\n      heavyDebrisCount: 4,\n      smallGasCanCount: 3,\n      mediumGasCanCount: 0,\n      largeGasCanCount: 1,\n      turnCount: 0,\n    };\n  }\n\n  initialize () {\n    super.initialize();\n    this.game.createEmptyLevel();\n    this.game.initializeMapTiles();\n    const offsetX = Math.floor(this.game.mapWidth / 2)\n    const offsetY = Math.floor(this.game.mapHeight / 2)\n    generateBuilding(this.game.map, offsetX, offsetY);\n    MapHelper.addTileZone(\n      { x: 0, y: 0 },\n      3,\n      3,\n      'SAFE',\n      this.game.map,\n      this.game.mapHeight,\n      this.game.mapWidth,\n    );\n    this.placeInitialItems();\n    this.placePlayersInSafeZone();\n\n    let array = Object.keys(this.game.map).filter((key) => this.game.map[key].type === 'FLOOR')\n    for (let index = 0; index < this.data.debrisCount; index++) {\n      let pos = Helper.getRandomInArray(array);\n      let posXY = pos.split(',').map((coord) => parseInt(coord));\n      this.addDebris({ x: posXY[0], y: posXY[1] });\n    }\n    for (let index = 0; index < this.data.mediumDebrisCount; index++) {\n      let pos = Helper.getRandomInArray(array);\n      let posXY = pos.split(',').map((coord) => parseInt(coord));\n      this.addDebris({ x: posXY[0], y: posXY[1] }, 'Medium Sized Debris', 'm', 10, 0);\n    }\n    for (let index = 0; index < this.data.heavyDebrisCount; index++) {\n      let pos = Helper.getRandomInArray(array);\n      let posXY = pos.split(',').map((coord) => parseInt(coord));\n      this.addDebris({ x: posXY[0], y: posXY[1] }, 'Heavy Sized Debris', 'H', 10, 0, false, false);\n    }\n    for (let index = 0; index < this.data.smallGasCanCount; index++) {\n      let pos = Helper.getRandomInArray(array);\n      let posXY = pos.split(',').map((coord) => parseInt(coord));\n      this.addDebris({ x: posXY[0], y: posXY[1] }, 'gas can', 'Xs', 1, 1, true, true, Constant.THEMES.SOLARIZED.orange);\n    }\n    for (let index = 0; index < this.data.mediumCanCount; index++) {\n      let pos = Helper.getRandomInArray(array);\n      let posXY = pos.split(',').map((coord) => parseInt(coord));\n      this.addDebris({ x: posXY[0], y: posXY[1] }, 'gas can', 'X', 1, 3, true, true, Constant.THEMES.SOLARIZED.orange);\n    }\n    for (let index = 0; index < this.data.largeGasCanCount; index++) {\n      let pos = Helper.getRandomInArray(array);\n      let posXY = pos.split(',').map((coord) => parseInt(coord));\n      this.addDebris({ x: posXY[0], y: posXY[1] }, 'gas can', 'XL', 1, 10, true, true, Constant.THEMES.SOLARIZED.orange);\n    }\n    for (let index = 0; index < this.data.fireIntensity; index++) {\n      let pos = Helper.getRandomInArray(array);\n      let posXY = pos.split(',').map((coord) => parseInt(coord));\n      this.addFire({ x: posXY[0], y: posXY[1] });\n    }\n    for (let index = 0; index < this.data.npcCount; index++) {\n      let pos = Helper.getRandomInArray(array);\n      let posXY = pos.split(',').map((coord) => parseInt(coord));\n      this.addNPC({ x: posXY[0], y: posXY[1] });\n    }\n    // sounds\n    if (!SOUNDS.fire_1.playing()) SOUNDS.fire_1.play();    \n  }\n\n  checkRemoveSafeFloors () {\n    const currentActor = this.game.engine.actors[this.game.engine.currentActor];\n    if (currentActor.name !== Constant.PLAYER_NAME) return;\n\n    this.data.turnCount += 1;\n    if (this.data.turnCount > this.getSaveCountRequirement() * 50) {\n      Object.keys(this.game.map).filter((key) => this.game.map[key].type == 'SAFE_FLOOR').forEach((key) => {\n        this.game.map[key].type = 'FLOOR';\n      });\n\n    }\n  }\n\n  update () {\n    super.update();\n    this.propogateFire();\n    this.burnEntities();\n    this.checkRemoveSafeFloors();\n    if (this.hasLost()) {\n      this.reset();\n      this.game.initializeGameData();\n    }\n    // triggerd once all npcs are saved\n    if (this.hasWon()) {\n      this.nextLevel();\n      this.increaseIntensity()\n      this.game.initializeGameData();\n    }\n  }\n  \n  //Extras\n\n  setLevel (level) {\n    this.data.level = level;\n    this.data.turnCount = 0;\n  }\n\n  nextLevel () {\n    this.setLevel(this.data.level + 1);\n  }\n\n  reset () {\n    this.resetIntensity();\n    this.setLevel(1);\n    this.initialize();\n  }\n\n  increaseIntensity () {\n    switch (this.data.level) {\n\n      case 2:\n        this.data.fireIntensity = 2;\n        this.data.npcCount = 1;\n        this.data.debrisCount = 4;\n        this.data.mediumDebrisCount = 4;\n        this.data.heavyDebrisCount = 1\n        this.data.smallGasCanCount = 1;\n        this.data.mediumGasCanCount = 1;\n        this.data.largeGasCanCount = 1;\n        break;\n      case 3:\n        this.data.fireIntensity = 3;\n        this.data.npcCount = 2;\n        this.data.debrisCount = 50;\n        this.data.mediumDebrisCount = 4;\n        this.data.heavyDebrisCount = 1\n        this.data.smallGasCanCount = 1;\n        this.data.mediumGasCanCount = 2;\n        this.data.largeGasCanCount = 1;\n        break;\n      case 4:\n        this.data.fireIntensity = 4;\n        this.data.npcCount = 2;\n        this.data.debrisCount = 6;\n        this.data.mediumDebrisCount = 4;\n        this.data.heavyDebrisCount = 1\n        this.data.smallGasCanCount = 3;\n        this.data.mediumGasCanCount = 2;\n        this.data.largeGasCanCount = 1;\n        break;\n      case 5:\n        this.data.fireIntensity = 5;\n        this.data.npcCount = 3;\n        this.data.debrisCount = 6;\n        this.data.mediumDebrisCount = 4;\n        this.data.heavyDebrisCount = 1\n        this.data.smallGasCanCount = 3;\n        this.data.mediumGasCanCount = 1;\n        this.data.largeGasCanCount = 1;\n        break;\n      case 6:\n        this.data.fireIntensity = 4;\n        this.data.npcCount = 3;\n        this.data.debrisCount = 10;\n        this.data.mediumDebrisCount = 4;\n        this.data.heavyDebrisCount = 1\n        this.data.smallGasCanCount = 3;\n        this.data.mediumGasCanCount = 1;\n        this.data.largeGasCanCount = 1;\n        break;\n      case 7:\n        this.data.fireIntensity = 1;\n        this.data.npcCount = 3;\n        this.data.debrisCount = 80;\n        this.data.mediumDebrisCount = 4;\n        this.data.heavyDebrisCount = 1\n        this.data.smallGasCanCount = 25;\n        this.data.mediumGasCanCount = 1;\n        this.data.largeGasCanCount = 1;\n        break;\n      case 8:\n        this.data.fireIntensity = 3;\n        this.data.npcCount = 3;\n        this.data.debrisCount = 20;\n        this.data.mediumDebrisCount = 4;\n        this.data.heavyDebrisCount = 1\n        this.data.smallGasCanCount = 6;\n        this.data.mediumGasCanCount = 1;\n        this.data.largeGasCanCount = 1;\n        break;\n      case 9:\n        this.game.toWin();\n        break;\n      default:\n        this.data.fireIntensity = 3;\n        this.data.npcCount = 3;\n        this.data.debrisCount = 20;\n        this.data.mediumDebrisCount = 4;\n        this.data.heavyDebrisCount = 1\n        this.data.gasCanCount = 5;\n        break;\n    }\n  }\n\n  resetIntensity () {\n    this.data.fireIntensity = 1;\n    this.data.npcCount = 1;\n    this.data.debrisCount = 4;\n  }\n\n  countNpcSafe () {\n    const helpless = this.game.engine.actors.filter((actor) => {\n      if (actor.entityTypes.includes('HELPLESS')) {\n        const tile = this.game.map[Helper.coordsToString(actor.pos)];\n        if (tile.type === 'SAFE') {\n          if (!actor.saved) actor.save();\n          return true;\n        }\n      }\n      return false\n    });\n\n    return helpless.length;\n  }\n\n  getSaveCountRequirement () {\n    const minimum = Math.ceil(this.data.npcCount * 0.66);\n    return Math.max(1, minimum);\n  }\n\n  hasWon () {\n    return this.countNpcSafe() >= this.getSaveCountRequirement();\n  }\n\n  hasLost () {\n    const helpless = this.game.engine.actors.filter((actor) => actor.entityTypes.includes('HELPLESS'));\n    if (helpless.length < this.getSaveCountRequirement()) {\n      SOUNDS.lose.play();\n      this.game.toLose();\n      return true;\n    }\n    return false;\n  }\n\n  addDebris (pos, name = 'box', character = '%', durability = 5, explosivity = 0, pushable = true, draggable = true, background = Constant.THEMES.SOLARIZED.base01) {\n    let sprite = Helper.getRandomInArray(['', '', '', '', '', '']);\n    switch (character) {\n      case '%':\n        sprite = Helper.getRandomInArray(['', '']);\n        break;\n      case 'm':\n        sprite = Helper.getRandomInArray(['', '']);\n        break;\n      case 'H':\n        sprite = Helper.getRandomInArray(['', '']);\n        break;\n      case 'Xs':\n        sprite = ''\n        break;\n      case 'X':\n        sprite = ''\n        break;\n      case 'XL':\n        sprite = ''\n        break;\n      default:\n        sprite = '';\n        break;\n    }\n\n    let box = new Debris({\n      pos,\n      renderer: {\n        character,\n        sprite,\n        color: Constant.THEMES.SOLARIZED.base2,\n        background,\n      },\n      name,\n      game: this.game,\n      durability,\n      explosivity,\n      flammability: 0,\n      draggable,\n      pushable,\n    })\n\n    this.game.placeActorOnMap(box)\n    this.game.draw();\n  }\n\n  addNPC (pos) {\n    // create new entity and place\n    let entity = new Speaker({\n      name: Constant.NPC_NAME,\n      // messages: SOLANGE.lyrics,\n      messages: ['help!', 'ahh!', 'It\\'s getting hot in hurr.'],\n      messageType: MESSAGE_TYPE.ACTION,\n      pos,\n      game: this.game,\n      renderer: {\n        character: 'C',\n        sprite: '',\n        color: Constant.THEMES.SOLARIZED.base3,\n        background: Constant.THEMES.SOLARIZED.violet,\n      },\n      durability: 2,\n    })\n\n    if (this.game.placeActorOnMap(entity)) {\n      const tile = this.game.map[Helper.coordsToString(entity.pos)];\n      tile.type = 'SAFE_FLOOR';\n      this.game.engine.addActor(entity);\n      this.game.draw();\n    };\n  }\n\n  addFire (pos) {\n    // create new fire actor and place\n    let fire = new FireSpread({\n      name: 'Pyro',\n      pos,\n      game: this.game,\n      renderer: {\n        character: '*',\n        sprite: '',\n        color: Constant.THEMES.SOLARIZED.base3,\n        background: Constant.THEMES.SOLARIZED.red,\n      },\n      timeToSpread: 1,\n      spreadCount: 1,\n      durability: 1,\n      attackDamage: 2,\n      speed: 100,\n    })\n\n    if (this.game.placeActorOnMap(fire)) {\n      this.game.engine.addActor(fire);\n      this.game.draw();\n    };\n  }\n\n  propogateFire () {\n    const fires = this.game.engine.actors.filter((actor) => actor.name === 'Pyro')\n    if (fires.length < this.data.fireIntensity) {\n      // find burnt tile\n      const keys = Object.keys(this.game.map).filter((key) => this.game.map[key].type == 'BURNT');\n      const key = Helper.getRandomInArray(keys);\n      if (key) {\n        const position = {\n          x: parseInt(key.split(',')[0]),\n          y: parseInt(key.split(',')[1]),\n        }\n        this.addFire(position)\n      }\n    }\n  }\n\n  burnEntities () {\n    // burn all entiies on burning tiles\n    const coordinates = Object.keys(this.game.map).filter((key) => this.game.map[key].type === 'BURNT');\n    const entities = coordinates.reduce((acc, curr) => acc.concat(this.game.map[curr].entities), []);\n    entities.forEach((ent) => {\n      if (ent.entityTypes.includes('BURNABLE')) {\n        const burned = ent.burn();\n        if (burned) this.game.addMessage(`${ent.name} is burned.`, MESSAGE_TYPE.DANGER);\n        if (ent.willResetCanBurn) ent.resetCanBurn();\n      }\n    })\n  }\n\n  placeInitialItems () {\n    let objects = [\n      Item.axe(this.game.engine),\n      Item.waterGun(this.game.engine),\n      Item.fireJacket(this.game.engine),\n    ];\n\n    const keys = Object.keys(this.game.map).filter((key) => this.game.map[key].type == 'SAFE');\n\n    objects.forEach((item) => {\n      const key = keys.pop();\n      if (key) {\n        const position = {\n          x: parseInt(key.split(',')[0]),\n          y: parseInt(key.split(',')[1]),\n        }\n        item.pos = position;\n        let tile = this.game.map[key];\n        if (tile) {\n          tile.entities.push(item);\n        }\n      }\n    })\n  }\n\n  placePlayersInSafeZone () {\n    let players = this.game.engine.actors.filter((actor) => actor.entityTypes.includes('PLAYING'))\n    const keys = Object.keys(this.game.map).filter((key) => this.game.map[key].type == 'SAFE');\n    players.forEach((player) => {\n      const key = keys.shift();\n      if (key) {\n        const position = {\n          x: parseInt(key.split(',')[0]),\n          y: parseInt(key.split(',')[1]),\n        }\n        player.pos = position;\n        let tile = this.game.map[key];\n        if (tile) {\n          tile.entities.push(player);\n        }\n      }\n    })\n  }\n\n}\n","import { Mode } from './default'\nimport { Flume } from './flume'\nimport { Castle } from './castle'\n\nexport default {\n  Mode,\n  Flume,\n  Castle,\n}","import * as Constant from '../constants';\nimport * as Helper from '../../helper';\nimport * as Item from '../items';\nimport * as MapHelper from '../Maps/helper';\nimport { generate as generateBuilding } from '../Maps/generator';\nimport { FireSpread, Speaker, Debris, Bandit, RangedBandit } from '../Entities/index';\nimport { MESSAGE_TYPE } from '../message';\nimport { Mode } from './default';\nimport SOUNDS from '../sounds';\nimport Konva from 'konva';\n\nconst MAP_DATA = require('../Maps/castle.json');\n\nexport class Castle extends Mode {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.data = {\n      level: 1,\n      highestLevel: null,\n      fireIntensity: 0, // increase this number to increase fire spread\n      npcCount: 1,\n      creatureCount: 1,\n      turnCount: 0,\n    };\n  }\n\n  initialize () {\n    super.initialize();\n    this.game.createEmptyLevel();\n    this.game.initializeMapTiles();\n    // this.game.createCustomLevel(MAP_DATA);\n    \n    this.setWaveData(this.data.level);\n    const offsetX = Math.floor(this.game.mapWidth / 2)\n    const offsetY = Math.floor(this.game.mapHeight / 2)\n    // generateBuilding(this.game.map, 2, 2, 1, 18);\n    // generateBuilding(this.game.map, 10, 10, 2, 4);\n    // generateBuilding(this.game.map, offsetX, offsetY, 2, 4);\n    let padding = 3;\n    MapHelper.addTileZone(\n      { x: padding, y: padding },\n      this.game.mapHeight - (padding * 2),\n      this.game.mapWidth - (padding * 2),\n      'WALL',\n      this.game.map,\n      this.game.mapHeight,\n      this.game.mapWidth,\n    );\n    padding = 4\n    MapHelper.addTileZone(\n      { x: padding, y: padding },\n      this.game.mapHeight - (padding * 2),\n      this.game.mapWidth - (padding * 2),\n      'FLOOR',\n      this.game.map,\n      this.game.mapHeight,\n      this.game.mapWidth,\n    );\n    padding = 5;\n    MapHelper.addTileZone(\n      { x: padding, y: padding },\n      this.game.mapHeight - (padding * 2),\n      this.game.mapWidth - (padding * 2),\n      'WALL',\n      this.game.map,\n      this.game.mapHeight,\n      this.game.mapWidth,\n    );\n    padding = 6\n    MapHelper.addTileZone(\n      { x: padding, y: padding },\n      this.game.mapHeight - (padding * 2),\n      this.game.mapWidth - (padding * 2),\n      'GROUND',\n      this.game.map,\n      this.game.mapHeight,\n      this.game.mapWidth,\n    );\n\n    MapHelper.addTileZone(\n      { x: 31, y: 9 },\n      4,\n      4,\n      'SAFE',\n      this.game.map,\n      this.game.mapHeight,\n      this.game.mapWidth,\n    );\n    generateBuilding(this.game.map, 10, 10, 2, 4);\n\n\n    this.placeInitialItems();\n    this.placePlayersInSafeZone();\n    let floorTiles = Object.keys(this.game.map).filter((key) => this.game.map[key].type === 'FLOOR')\n    for (let index = 0; index < this.data.npcCount; index++) {\n      let pos = Helper.getRandomInArray(floorTiles);\n      let posXY = pos.split(',').map((coord) => parseInt(coord));\n      this.addNPC({ x: posXY[0], y: posXY[1] });\n    }\n    let groundTiles = Object.keys(this.game.map).filter((key) => this.game.map[key].type === 'GROUND')\n    for (let index = 0; index < this.data.creatureCount; index++) {\n      let pos = Helper.getRandomInArray(groundTiles);\n      let posXY = pos.split(',').map((coord) => parseInt(coord));\n      this.addEnemy({ x: posXY[0], y: posXY[1] });\n    }\n  }\n\n  update () {\n    super.update();\n    this.propogateFire();\n    this.burnEntities();\n    if (this.hasLost()) {\n      this.reset();\n      this.game.initializeGameData();\n    }\n    // triggerd once all npcs are saved\n    if (this.hasWon()) {\n      this.nextLevel();\n      this.beginNextWave();\n      this.game.initializeGameData();\n    }\n  }\n  \n  //Extras\n  setLevel (level) {\n    this.data.level = level;\n    this.data.turnCount = 0;\n  }\n\n  nextLevel () {\n    this.setLevel(this.data.level + 1);\n  }\n\n  reset () {\n    this.setLevel(1);\n    this.initialize();\n  }\n\n  setWaveData (level) {\n    switch (level) {\n      case 1:\n        this.data.creatureCount = 0;\n        this.data.npcCount = 1;\n        break;\n      case 2:\n        this.data.creatureCount = 5;\n        this.data.npcCount = 1;\n        break;\n      case 3:\n        this.data.creatureCount = 10;\n        this.data.npcCount = 1;\n        break;\n      default:\n        this.data.creatureCount = 20;\n        this.data.npcCount = 1;\n        break;\n    }\n  }\n\n  countNpcSafe () {\n    const helpless = this.game.engine.actors.filter((actor) => {\n      if (actor.entityTypes.includes('HELPLESS')) {\n        const tile = this.game.map[Helper.coordsToString(actor.pos)];\n        if (tile.type === 'SAFE') {\n          if (!actor.saved) actor.save();\n          return true;\n        }\n      }\n      return false\n    });\n\n    return helpless.length;\n  }\n\n  getSaveCountRequirement () {\n    const minimum = Math.ceil(this.data.npcCount * 0.66);\n    return Math.max(1, minimum);\n  }\n\n  hasWon () {\n    return this.countNpcSafe() >= this.getSaveCountRequirement();\n  }\n\n  hasLost () {\n    const helpless = this.game.engine.actors.filter((actor) => actor.entityTypes.includes('HELPLESS'));\n    if (helpless.length < this.getSaveCountRequirement()) {\n      SOUNDS.lose.play();\n      this.game.toLose();\n      return true;\n    }\n    return false;\n  }\n\n  addDebris (pos, name = 'box', character = '%', durability = 5, explosivity = 0, pushable = true, draggable = true, background = Constant.THEMES.SOLARIZED.base01) {\n    let sprite = Helper.getRandomInArray(['', '', '', '', '', '']);\n    switch (character) {\n      case '%':\n        sprite = Helper.getRandomInArray(['', '']);\n        break;\n      case 'm':\n        sprite = Helper.getRandomInArray(['', '']);\n        break;\n      case 'H':\n        sprite = Helper.getRandomInArray(['', '']);\n        break;\n      case 'Xs':\n        sprite = ''\n        break;\n      case 'X':\n        sprite = ''\n        break;\n      case 'XL':\n        sprite = ''\n        break;\n      default:\n        sprite = '';\n        break;\n    }\n\n    let box = new Debris({\n      pos,\n      renderer: {\n        character,\n        sprite,\n        color: Constant.THEMES.SOLARIZED.base2,\n        background,\n      },\n      name,\n      game: this.game,\n      durability,\n      explosivity,\n      flammability: 0,\n      draggable,\n      pushable,\n    })\n\n    this.game.placeActorOnMap(box)\n    // this.game.draw();\n  }\n\n  addNPC (pos) {\n    // create new entity and place\n    let entity = new Speaker({\n      name: Constant.NPC_NAME,\n      // messages: SOLANGE.lyrics,\n      messages: ['help!', 'ahh!', 'It\\'s getting hot in hurr.'],\n      messageType: MESSAGE_TYPE.ACTION,\n      pos,\n      game: this.game,\n      renderer: {\n        character: 'C',\n        sprite: '',\n        color: Constant.THEMES.SOLARIZED.base3,\n        background: Constant.THEMES.SOLARIZED.violet,\n      },\n      durability: 2,\n    })\n\n    if (this.game.placeActorOnMap(entity)) {\n      const tile = this.game.map[Helper.coordsToString(entity.pos)];\n      tile.type = 'SAFE_FLOOR';\n      this.game.engine.addActor(entity);\n      // this.game.draw();\n    };\n  }\n\n  addFire (pos) {\n    // create new fire actor and place\n    let fire = new FireSpread({\n      name: 'Pyro',\n      pos,\n      game: this.game,\n      renderer: {\n        character: '*',\n        sprite: '',\n        color: Constant.THEMES.SOLARIZED.base3,\n        background: Constant.THEMES.SOLARIZED.red,\n      },\n      timeToSpread: 1,\n      spreadCount: 1,\n      durability: 1,\n      attackDamage: 2,\n      speed: 100,\n    })\n\n    if (this.game.placeActorOnMap(fire)) {\n      this.game.engine.addActor(fire);\n      // this.game.draw();\n    };\n  }\n\n  getBanditStats () {\n    let banditLevels = [\n      {\n        name: 'Slingshot',\n        renderer: {\n          character: Helper.getRandomInArray(['r']),\n          color: '#ced5dd',\n          background: '',\n        },\n        durability: 1,\n        attackDamage: 1,\n        speed: 100,\n        entityClass: RangedBandit\n      },\n      {\n        name: 'Buckshot',\n        renderer: {\n          character: Helper.getRandomInArray(['r']),\n          color: '#3fc072',\n          background: '',\n        },\n        durability: 2,\n        attackDamage: 1,\n        speed: 200,\n        entityClass: RangedBandit\n      },\n      {\n        name: 'Ross',\n        renderer: {\n          character: Helper.getRandomInArray(['b']),\n          color: '#ced5dd',\n          background: '',\n        },\n        durability: 1,\n        attackDamage: 1,\n        speed: 100,\n        entityClass: Bandit\n      },\n      {\n        name: 'Kevin',\n        renderer: {\n          character: Helper.getRandomInArray(['b']),\n          color: '#3fc072',\n          background: '',\n        },\n        durability: 2,\n        attackDamage: 1,\n        speed: 100,\n        entityClass: Bandit\n      },\n      {\n        name: 'Jacob',\n        renderer: {\n          character: Helper.getRandomInArray(['b']),\n          color: '#67a1d7',\n          background: '',\n        },\n        durability: 3,\n        attackDamage: 1,\n        speed: 100,\n        entityClass: Bandit\n      },\n      {\n        name: 'Jarod',\n        renderer: {\n          character: Helper.getRandomInArray(['b']),\n          color: '#e16264',\n          background: '',\n        },\n        durability: 1,\n        attackDamage: 5,\n        speed: 300,\n        entityClass: Bandit\n      },\n      {\n        name: 'Bigii',\n        renderer: {\n          character: Helper.getRandomInArray(['b']),\n          color: '#9f62e1',\n          background: '',\n        },\n        durability: 15,\n        attackDamage: 10,\n        speed: 100,\n        entityClass: Bandit\n      },\n    ]\n    return Helper.getRandomInArray(banditLevels);\n  }\n\n  addEnemy (pos) {\n    let players = this.game.engine.actors.filter((actor) => actor.entityTypes.includes('PLAYING'))\n    let targetEntity = players[0]\n    const banditStats = this.getBanditStats();\n    let entity = new banditStats.entityClass({\n      targetEntity,\n      pos,\n      renderer: banditStats.renderer,\n      name: banditStats.name,\n      game: this.game,\n      actions: [],\n      attackDamage: banditStats.attackDamage,\n      durability: banditStats.durability,\n      speed: banditStats.speed,\n      // directional projectile destruction breaks engine\n      getProjectile: ({ pos, targetPos, direction, range }) => Item.directionalKunai(this.game.engine, { ...pos }, direction, range)\n      // getProjectile: ({ pos, targetPos, direction, range }) => Item.kunai(game.engine, { ...pos }, { ...targetPos })\n    })\n    if (this.game.placeActorOnMap(entity)) {\n      this.game.engine.addActor(entity);\n      // this.game.draw();\n    };\n  }\n\n  propogateFire () {\n    const fires = this.game.engine.actors.filter((actor) => actor.name === 'Pyro')\n    if (fires.length < this.data.fireIntensity) {\n      // find burnt tile\n      const keys = Object.keys(this.game.map).filter((key) => this.game.map[key].type == 'BURNT');\n      const key = Helper.getRandomInArray(keys);\n      if (key) {\n        const position = {\n          x: parseInt(key.split(',')[0]),\n          y: parseInt(key.split(',')[1]),\n        }\n        this.addFire(position)\n      }\n    }\n  }\n\n  burnEntities () {\n    // burn all entiies on burning tiles\n    const coordinates = Object.keys(this.game.map).filter((key) => this.game.map[key].type === 'BURNT');\n    const entities = coordinates.reduce((acc, curr) => acc.concat(this.game.map[curr].entities), []);\n    entities.forEach((ent) => {\n      if (ent.entityTypes.includes('BURNABLE')) {\n        const burned = ent.burn();\n        if (burned) this.game.addMessage(`${ent.name} is burned.`, MESSAGE_TYPE.DANGER);\n        if (ent.willResetCanBurn) ent.resetCanBurn();\n      }\n    })\n  }\n\n  placeInitialItems () {\n    let objects = [\n      Item.axe(this.game.engine),\n      Item.waterGun(this.game.engine),\n      Item.fireJacket(this.game.engine),\n    ];\n\n    const keys = Object.keys(this.game.map).filter((key) => this.game.map[key].type == 'SAFE');\n\n    objects.forEach((item) => {\n      const key = keys.pop();\n      if (key) {\n        const position = {\n          x: parseInt(key.split(',')[0]),\n          y: parseInt(key.split(',')[1]),\n        }\n        item.pos = position;\n        let tile = this.game.map[key];\n        if (tile) {\n          tile.entities.push(item);\n        }\n      }\n    })\n  }\n\n  placePlayersInSafeZone () {\n    let players = this.game.engine.actors.filter((actor) => actor.entityTypes.includes('PLAYING'))\n    const keys = Object.keys(this.game.map).filter((key) => this.game.map[key].type == 'SAFE');\n    players.forEach((player) => {\n      const key = keys.shift();\n      if (key) {\n        const position = {\n          x: parseInt(key.split(',')[0]),\n          y: parseInt(key.split(',')[1]),\n        }\n        player.pos = position;\n        let tile = this.game.map[key];\n        if (tile) {\n          tile.entities.push(player);\n        }\n      }\n    })\n  }\n\n}\n","import React from 'react';\nimport * as ROT from 'rot-js';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\nimport * as Message from './message';\nimport { Display } from './Display/konvaCustom';\nimport Mode from './Modes/index';\n\n// const MAP_DATA = require('./Maps/castle.json');\n// const SOLANGE = require('./Data/solange.json');\n\nconst MAP_WIDTH = 50;\nconst MAP_HEIGHT = 25;\n// const MAP_WIDTH = 100;\n// const MAP_HEIGHT = 100;\nconst TILE_WIDTH = 30;\nconst TILE_HEIGHT = 30;\nconst TILE_OFFSET = 0;\nconst canvasWidth = (50 * TILE_WIDTH) + TILE_OFFSET;\nconst canvasHeight = (25 * TILE_HEIGHT) + TILE_OFFSET;\n// const canvasWidth = (MAP_WIDTH * TILE_WIDTH) + TILE_OFFSET;\n// const canvasHeight = (MAP_HEIGHT * TILE_HEIGHT) + TILE_OFFSET;\n\nexport class Game {\n  constructor({\n    engine = null,\n    map = {},\n    entityMap = {},\n    entityDictionary = {},\n    mapInitialized = false,\n    tileMap = {},\n    mapWidth = MAP_WIDTH,\n    mapHeight = MAP_HEIGHT,\n    tileWidth = TILE_WIDTH,\n    tileHeight = TILE_HEIGHT,\n    tileOffset = TILE_OFFSET,\n    getSelectedCharacter = () => false,\n    spriteMode = true,\n    tileKey = Constant.TILE_KEY,\n    mode = Mode.Flume,\n    messages = [],\n  }) {\n    this.engine = engine;\n    this.map = map;\n    this.entityMap = entityMap;\n    this.entityDictionary = entityDictionary;\n    this.mapInitialized = mapInitialized;\n    this.tileMap = tileMap;\n    this.mapWidth = mapWidth;\n    this.mapHeight = mapHeight;\n    this.tileWidth = tileWidth;\n    this.tileHeight = tileHeight;\n    this.tileOffset = tileOffset;\n    this.display = new Display({\n      containerId: 'display',\n      width: canvasWidth,\n      height: canvasHeight,\n      tileWidth: tileWidth,\n      tileHeight: tileHeight,\n      tileOffset: tileOffset,\n      game: this,\n    });\n    this.spriteMode = spriteMode;\n    this.tileKey = tileKey;\n    this.mode = new mode({game: this});\n    this.messages = messages;\n    this.getSelectedCharacter = getSelectedCharacter;\n  }\n\n  initializeMode () {\n    this.mode.initialize();\n  }\n  \n  updateMode () { // this is run every game turn\n    this.mode.update();\n  }\n\n  randomlyPlaceActorOnMap(actor) {\n    let kill = 0;\n    let placed = false;\n    while (!placed) {\n      let pos = Helper.getRandomPos(this.map).coordinates\n      if (this.canOccupyPosition(pos, actor)) {\n        let tile = this.map[Helper.coordsToString(pos)]\n        actor.pos = { ...pos }\n        tile.entities.push(actor);\n        placed = true;\n      }\n      kill += 1;\n      if (kill >= 100) {\n        placed = true;\n      }\n    }\n    return placed;\n  }\n\n  randomlyPlaceAllActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      this.randomlyPlaceActorOnMap(actor);\n    })\n  }\n\n  placeActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let tile = this.map[Helper.coordsToString(actor.pos)]\n      if (tile) {\n        tile.entities.push(actor);\n      } else {\n        console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      }\n    })\n  }\n\n  placeActorOnMap(actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (tile) {\n      tile.entities.push(actor);\n      return true\n    } else {\n      console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      return false\n    }\n  }\n\n  removeActorFromMap (actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (!tile) return false;\n    this.map[Helper.coordsToString(actor.pos)].entities = tile.entities.filter((ac) => ac.id !== actor.id);\n    return true;\n  }\n\n  createLevel () {\n    let digger = new ROT.Map.Arena(this.mapWidth, this.mapHeight);\n    // let digger = new ROT.Map.Rogue();\n    // let digger = new ROT.Map.DividedMaze();\n    // let digger = new ROT.Map.EllerMaze();\n    // let digger = new ROT.Map.Cellular();\n    // let digger = new ROT.Map.Digger(this.mapWidth, this.mapHeight);\n    // let digger = new ROT.Map.IceyMaze();\n    // let digger = new ROT.Map.Uniform();\n    let freeCells = [];\n    let digCallback = function (x, y, value) {      \n      let key = x + \",\" + y;\n      let type = 'GROUND';\n      let currentFrame = 0;\n      if (value) { \n        type = 'WALL';\n        // type = 'WATER';\n      }\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n      freeCells.push(key);\n    }\n    digger.create(digCallback.bind(this));\n    this.randomlyPlaceAllActorsOnMap()\n  }\n\n  createEmptyLevel () {\n    for (let i = 0; i < this.mapHeight; i ++) {\n      for (let j = 0; j < this.mapWidth; j ++) {\n        const key = `${j},${i}`\n        let type = 'GROUND';\n        let currentFrame = 0;\n\n        if (Constant.TILE_KEY[type].animation) {\n          currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n        }\n\n        this.map[key] = {\n          type,\n          currentFrame,\n          entities: [],\n        };\n      }\n    }\n  }\n\n  createCustomLevel (data) {\n    Object.keys(data.tiles).forEach((key, i) => {\n      const tile = data.tiles[key];\n      let type = tile.data.type;\n      let currentFrame = 0;\n      if (!type) {\n        type = 'GROUND';\n      }\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n    \n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n    })\n\n    // this.placeInitialEntities();\n  }\n\n  canOccupyPosition (pos, entity = {passable: false}) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      let hasImpassableEntity = targetTile.entities.filter((entity) => !entity.passable).length > 0;\n      if (!hasImpassableEntity || entity.passable) {\n        let tile = this.map[Helper.coordsToString(pos)];\n        if (this.tileKey[tile.type].passable) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  cursorCanOccupyPosition(pos) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  show (document) {\n    this.display.initialize(document)\n  }\n\n  getRenderMap(fullMap, referencePosition, renderWidth, renderHeight, fullWidth, fullHeight) { \n    // create an object with only tile keys that should be rendered (around player)\n    // renderWidth/Height measured in tiles\n    // reference positon usually based on player pos\n    // position from fullMap key should be translated to 0,0 based on referencePos\n    \n    const renderPaddingX = Math.floor((renderWidth / 2));\n    const renderPaddingY = Math.floor((renderHeight / 2));\n    let offsetX = referencePosition.x - renderPaddingX;\n    let offsetY = referencePosition.y - renderPaddingY;\n    offsetX = Helper.clamp(offsetX, 0, fullWidth - renderWidth);\n    offsetY = Helper.clamp(offsetY, 0, fullHeight - renderHeight);\n    \n    let result = {}\n    for (let key in fullMap) {\n      let parts = key.split(\",\");\n      let x = parseInt(parts[0]);\n      let y = parseInt(parts[1]);\n      let finalX = x - offsetX;\n      let finalY = y - offsetY;\n      if (finalX >= 0 && finalX <= renderWidth) {\n        if (finalY >= 0 && finalY <= renderHeight) {\n          result[`${finalX},${finalY}`] = fullMap[key]\n        }\n      }\n    }\n    // console.log(referencePosition);\n    // console.log('renderWidth: ', renderWidth);\n    // console.log('renderHeight: ', renderHeight);\n    // console.log('offsetX ', offsetX);\n    // console.log('offsetY ', offsetY);\n    // console.log(Object.keys(fullMap));\n    // console.log(Object.keys(fullMap).length);\n    // console.log(Object.keys(this.tileMap));\n    // console.log(Object.keys(this.tileMap).length);\n    // console.log(Object.keys(result));\n    // console.log(Object.keys(result).length);\n    return result\n  }\n\n  processTileMap (callback) {\n    // const map = this.map;\n    // const map = this.getRenderMap(this.map, this.getPlayerPosition(), this.mapWidth, this.mapHeight);\n    // const map = this.getRenderMap(this.map, this.getPlayerPosition(), 50, 25, this.mapWidth, this.mapHeight);\n    const map = this.getRenderMap(this.map, this.getPlayerPosition(), 10, 5, this.mapWidth, this.mapHeight);\n    for (let key in map) {\n      let parts = key.split(\",\");\n      let x = parseInt(parts[0]);\n      let y = parseInt(parts[1]);\n      let tile = map[key];\n      // let { foreground, background } = this.tileKey[tile.type]\n      // Proto code to handle tile animations\n      let tileRenderer = this.tileKey[tile.type]\n      let nextFrame = this.animateTile(tile, tileRenderer);\n      let character = nextFrame.character;\n      let foreground = nextFrame.foreground;\n      let background = nextFrame.background;\n      \n      if (tile.entities.length > 0) {\n        let entity = tile.entities[tile.entities.length - 1]\n        nextFrame = this.animateEntity(entity);\n\n        character = nextFrame.character\n        foreground = nextFrame.foreground\n        if (nextFrame.background) {\n          background = nextFrame.background\n        }\n      }\n      callback(key, x, y, character, foreground, background);          \n    }\n  }\n\n  initializeMapTiles () {\n    if (this.mapInitialized) return false;\n    this.mapInitialized = true;\n    this.processTileMap((key, x, y, character, foreground, background) => {\n      let node = this.display.createTile(x, y, character, foreground, background);\n      this.tileMap[key] = node;\n    });\n  }\n\n  getPlayers () {\n    return this.engine.actors.filter((actor) => actor.entityTypes.includes('PLAYING'))\n  }\n\n  getPlayerPosition () {\n    let playerPos = null;\n    const players = this.getPlayers();\n    if (players.length) { playerPos = players[0].pos }\n    return playerPos;\n  }\n  \n  draw () {\n    this.processTileMap((key, x, y, character, foreground, background) => {\n      this.display.updateTile(this.tileMap[key], character, foreground, background);\n    });\n    this.display.draw();\n  }\n\n  getEntityRenderer (renderer) {\n    // if sprite mode is on and the renderer has a sprite defined, use that\n    if (this.spriteMode && renderer.hasOwnProperty('sprite')) {\n      return {...renderer, character: renderer.sprite, foreground: renderer.color}\n      // return {character: renderer.sprite, foreground: renderer.background, background: ''}\n    }\n    // else us the ascii character\n    return {...renderer, foreground: renderer.color}\n  }\n\n  getTileRenderer (renderer) {\n    // if sprite mode is on and the renderer has a sprite defined, use that\n    if (this.spriteMode && renderer.hasOwnProperty('sprite')) {\n      return {...renderer, character: renderer.sprite}\n    }\n    // else us the ascii character\n    return renderer\n  }\n  \n  animateEntity (entity) {\n    let renderer = entity.renderer;\n    let { character, foreground, background } = this.getEntityRenderer(renderer)\n    if (renderer.animation) {\n      let frame = this.getEntityRenderer(renderer.animation[entity.currentFrame]);\n      character = frame.character;\n      foreground = frame.foreground;\n      background = frame.background;\n      entity.currentFrame = (entity.currentFrame + 1) % renderer.animation.length;\n    }\n    return {character, foreground, background}\n  }\n\n  animateTile (tile, renderer) {\n    let {character, foreground, background} = this.getTileRenderer(renderer)\n    if (renderer.animation) {\n      let frame = this.getTileRenderer(renderer.animation[tile.currentFrame]);\n      character = frame.character\n      foreground = frame.foreground;\n      background = frame.background;\n      tile.currentFrame = (tile.currentFrame + 1) % renderer.animation.length;\n    }\n    return {character, foreground, background}\n  }\n\n  addActor (actor, engine = this.engine) {\n    let isPlaced = this.placeActorOnMap(actor); // replace with placeActorOnMap\n    if (!isPlaced) { return false }\n    engine.actors.push(actor);\n    this.draw();\n    return true\n  }\n\n  placeAndDrawActor (actor) {\n    this.placeActorsOnMap(); // replace with placeActorOnMap\n    this.draw();\n  }\n\n  removeActor (actor) {\n    this.engine.actors = this.engine.actors.filter((ac) => ac.id !== actor.id);\n    // this.engine.currentActor = this.engine.actors.length - 1; // should remove need for this line\n    // this.engine.currentActor = (this.engine.currentActor) % this.engine.actors.length;\n    // this.engine.currentActor = (this.engine.currentActor + 1) % this.engine.actors.length;\n    this.removeActorFromMap(actor);\n    this.draw();\n  }\n\n  initializeUI (presserRef, document) {\n    this.show(document);\n    presserRef.current.focus();\n  }\n\n  initializeGameData () {\n    this.engine.game = this;\n    const selectedCharacter = this.getSelectedCharacter();\n    this.engine.actors = [selectedCharacter];\n    this.engine.actors.forEach((actor) => {\n      actor.game = this;\n    });\n    // this.createEmptyLevel();\n    // this.initializeMapTiles();\n    this.initializeMode();\n    this.draw();\n  }\n\n  initialize (presserRef, document) {\n    this.initializeUI(presserRef, document);\n    this.initializeGameData();\n    // hack to register sprite mode\n    setTimeout(() => {\n      this.spriteMode = false;\n      this.draw()\n    }, 100)\n    setTimeout(() => {\n      this.spriteMode = true;\n      this.draw()\n    }, 100)\n    // end hack\n  }\n\n  addMessage (text, type) {\n    const message = new Message.Message({text, type})\n    this.messages.push(message);\n  }\n}\n\n\n/************************** UI ********************************/\nexport const handleKeyPress = (event, engine) => {\n  if (!engine.isRunning) {\n    let actor = engine.actors[engine.currentActor];\n    let keymap = actor.keymap;\n    let code = event.key;\n    if (!(code in keymap)) { return; }\n    keymap[code]['activate']();\n    engine.start()\n  }\n  return;\n}\n\nexport const DisplayElement = (presserRef, handleKeyPress, engine) => {\n  return (\n    <div\n      id='display'\n      ref={presserRef}\n      onKeyDown={(event) => handleKeyPress(event, engine)}\n      // onKeyUp={(event) => handleKeyPress(event, engine)}\n      tabIndex='0'\n    />\n  )\n}\n/************************** UI ********************************/\n","import React from 'react';\nimport { SCREENS } from '../Screen/constants';\n\nclass Instructions extends React.Component {\n  render() {\n    let modeDetails = null;\n    try {\n      modeDetails = (\n        <span>\n          <div className='Instructions__block'>{`Wave ${this.props.game.mode.data.level}`}</div>\n          <div className='Instructions__block'>\n            {\n              `${this.props.game.mode.countNpcSafe()} of  ${this.props.game.mode.getSaveCountRequirement()} are safe!`\n            }\n          </div>\n        </span>\n      );\n    } catch { return }\n\n    return (\n      <div className=\"Instructions UI\">\n        <p className='flow-text'>\n          Save all of the citizens from the burning keep and get them to the safe zone!\n        </p>\n        <div className='flow-text'>\n          { modeDetails }\n          <div \n            className='Instructions__block'\n            onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}\n          >\n            {/* <button className='btn btn-main' onClick={() => window.location.reload()}>\n              Restart\n            </button> */}\n            {/* <button className='btn btn-main' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>\n              Restart\n            </button> */}\n            <button className='btn btn-main'>\n              Restart\n            </button>\n          </div>\n          <div \n            className='Instructions__block'\n            onClick={() => this.props.toggleSpriteMode()}\n          >\n            <button className='btn btn-main'>\n              {\n                this.props.spriteMode ? (\n                  'ASCII mode'\n                ) : (\n                  'Sprite mode'\n                )\n              }\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Instructions;","import React from 'react';\n\nfunction Button(props) {\n  let color = props['color'];\n  if (!color) color = 'grey';\n  return (\n    <button\n      onClick={props.onClick}\n      className={`Button btn ${color}`}\n    >\n      {props.children}  \n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nclass Information extends React.Component {\n  render() {\n    return (\n      <div className=\"Information UI\">\n        <div className='flow-text'>Information</div>\n        {\n          this.props.data && (\n            this.props.data.map((item, index) => {\n              return (\n                <Button key={index} color={item['color']} onClick={() => null}>\n                  {`${item.label}: ${item.value}`}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Information;","import React from 'react';\nimport Button from './Button';\n\nclass Equipment extends React.Component {\n  render() {\n    return (\n      <div className=\"Equipment UI\">\n        {\n          this.props.equipment && (\n            <div>\n              <div className='flow-text'>Equipment</div>\n              <div>\n                {\n                  this.props.equipment.map((slot, index) => {\n                    return (\n                      <Button key={index} onClick={() => null}>\n                        {slot.name} {slot.item ? slot.item.renderer.character : ''}\n                      </Button>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Equipment;","import React from 'react';\nimport Button from './Button';\n\nclass Inventory extends React.Component {\n  render() {\n    return (\n      <div className=\"Inventory UI\">\n        {\n          this.props.inventory && (\n            <div>\n              <div className='flow-text'>Inventory</div>\n              <div>\n                {\n                  this.props.inventory.map((slot, index) => {\n                    return (\n                      <Button key={index} onClick={() => null}>\n                        {`${slot.itemType} | x ${slot.items.length}`}\n                      </Button>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Inventory;","import React from 'react';\nimport Button from './Button';\n\nclass Keymap extends React.Component {\n  render() {\n    return (  \n      <div className=\"Keymap UI\">\n        <div className='flow-text center'>Keymap</div>\n        {\n          \n          this.props.keymap && (\n            Object.entries(this.props.keymap).map(([key, value], index) => {\n              const hidden = value.hasOwnProperty('hidden') ? value.hidden : false;\n              const color = key === 'Escape' ? 'amber darken-3' : 'grey darken-1';\n              if (!hidden) {\n                return (\n                  <Button \n                    key={index}\n                    onClick={() => {\n                        value.activate();\n                        if (!this.props.game.engine.isRunning) this.props.game.engine.start();\n                        this.props.refocus();\n                      } \n                    }\n                    color={color}\n                  >\n                    {key} {value.label}\n                  </Button>\n                )\n              }\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Keymap;","import React from 'react';\n\nfunction Message (props) {\n  return (\n    <div\n      className='Message'\n      style={{\n        color: props.color,\n        backgroundColor: props.backgroundColor,\n        borderColor: props.color,\n      }}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nclass Messages extends React.Component {\n  render() {\n    return (\n      <div className=\"Messages UI\">\n        <div className='flow-text center'>Messages</div>\n        {\n          this.props.messages && (\n            this.props.messages.map((message, index) => {\n              return (\n                <Message \n                  key={index} \n                  color={message.type.color}\n                  backgroundColor={message.type.backgroundColor}\n                >\n                  {`${message.text}`}\n                </Message>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Messages;","import React from 'react';\nimport { SCREENS } from './constants';\nimport * as Engine from '../Engine/engine';\nimport * as Game from '../game';\nimport Instructions from '../UI/Instructions';\nimport Information from '../UI/Information';\nimport Equipment from '../UI/Equipment';\nimport Inventory from '../UI/Inventory';\nimport KeymapUI from '../UI/Keymap';\nimport Messages from '../UI/Messages';\n\nclass Level extends React.Component {\n  constructor(props) {\n    super(props);\n    let ENGINE = new Engine.Engine({});\n    let game = new Game.Game({ \n      engine: ENGINE, \n      getSelectedCharacter: () => this.props.selectedCharacter.initialize(ENGINE),\n      mode: this.props.selectedMode.class,\n    })\n    this.state = {\n      game: game,\n      activeTab: 0,\n      spriteMode: game.spriteMode,\n    };\n    this.presserRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    this.state.game.initialize(this.presserRef, document)\n    this.state.game['backToTitle'] = () => this.props.setActiveScreen(SCREENS.TITLE);\n    this.state.game['toLose'] = () => this.props.setActiveScreen(SCREENS.LOSE);\n    this.state.game['toWin'] = () => this.props.setActiveScreen(SCREENS.WIN);\n    this.state.game.updateReact = (newGameState) => { this.setState({game: newGameState}) }\n    this.state.game.engine.start()\n  }\n\n  refocus () {\n    if (this.presserRef) this.presserRef.current.focus();\n  }\n\n  toggleSpriteMode () {\n    this.state.game.spriteMode = !this.state.game.spriteMode;\n    this.state.game.draw();\n    // this.presserRef.current.focus();\n    this.refocus();\n    this.setState({ spriteMode: this.state.game.spriteMode})\n  }\n\n  render() {\n    let currentActor = this.state.game.engine.actors[this.state.game.engine.currentActor];\n    let data = [\n      {\n        label: 'Wave',\n        value: `Current: ${this.state.game.mode.data.level}, Highest: ${this.state.game.mode.data.highestLevel}`,\n      },\n    ];\n\n    data = data.concat(\n      [\n        ...this.state.game.engine.actors.map((actor, index) => {\n          let result = {\n            label: actor.name,\n            value: index,\n            value: `HP: ${actor.durability}, En/Sp: ${actor.energy}/${actor.speed}`,\n          };\n          if (index === this.state.game.engine.currentActor) {\n            result['color'] = 'red';\n          }\n          return result;\n        })\n      ]\n    )\n\n    return (\n      <div className=\"Level\">\n        <div className='row'>\n          <div className='col s10'>\n            <div className='game_display_container'>\n              {Game.DisplayElement(this.presserRef, Game.handleKeyPress, this.state.game.engine)}\n              {/* <Information data={data} /> */}\n            </div>\n            <Instructions game={this.state.game} spriteMode={this.state.game.spriteMode} setActiveScreen={this.props.setActiveScreen} toggleSpriteMode={this.toggleSpriteMode.bind(this)} />\n          </div>\n          <div className='col s2'>\n            <KeymapUI keymap={this.state.game.visibleKeymap} game={this.state.game} refocus={this.refocus.bind(this)}/>\n            <Messages messages={this.state.game.messages.slice(-5).reverse()} />\n          </div>\n          {/* <button className='btn' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>Quit</button> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Level;\n","import React from 'react';\nimport { SCREENS } from '../Screen/constants';\n\nconst CharacterSelect = (props) => {\n  return (\n    <div className='CharacterSelect'>\n      {\n        props.characters.map((character, index) => {\n          let color = '';\n          if (props.selectedCharacter) {\n            color = props.selectedCharacter.name === character.name ? 'red' : ''\n          }\n\n          return (\n            <button\n              key={index}\n              style={{\n                position: 'relative',\n                top: '280px'\n              }}\n              className={`CharacterSelect__button btn btn-main`}\n              onClick={() => {\n                props.setSelectedCharacter(character)\n                props.setActiveScreen(SCREENS.LEVEL)\n              }}\n            >\n              Play as {character.name}\n            </button>\n          )\n        })\n      }\n    </div>\n  );\n}\n\nexport default CharacterSelect;","import React from 'react';\nimport { SCREENS } from './constants';\nimport CharacterSelect from '../UI/CharacterSelect';\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: 'rgb(4, 49, 61)',\n            backgroundImage: `url(\"${window.PUBLIC_URL}/fire_man_blue.jpg\")`,\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundPositionY: '10px'\n\n          }}\n        >\n          <button\n            style={{\n              position: 'relative',\n              top: '280px'\n            }}\n            className={`CharacterSelect__button btn btn-main`}\n            onClick={() => {\n              this.props.setActiveScreen(SCREENS.MODE_SELECT)\n            }}\n          >\n            Play\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Title;","import React from 'react';\nimport CharacterSelect from '../UI/CharacterSelect';\n\n\nclass Lose extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: '#222',\n            // backgroundColor: 'rgb(4, 49, 61)',\n            backgroundImage: `url(\"${window.PUBLIC_URL}/fire_man_blue.jpg\")`,\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundPositionY: '10px'\n\n          }}\n        >\n          <CharacterSelect \n            characters={this.props.characters} \n            selectedCharacter={this.props.selectedCharacter} \n            setSelectedCharacter={this.props.setSelectedCharacter}\n            setActiveScreen={this.props.setActiveScreen}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Lose;","import React from 'react';\nimport CharacterSelect from '../UI/CharacterSelect';\n\nclass Win extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n\n            width: '100vw',\n            height: '100vh',\n            // backgroundColor: '#eee',\n            backgroundColor: 'rgb(54,160,190)',\n            backgroundImage: `url(\"${window.PUBLIC_URL}/fire_man_blue.jpg\")`,\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundPositionY: '10px'\n\n          }}\n        >\n          <CharacterSelect \n            characters={this.props.characters} \n            selectedCharacter={this.props.selectedCharacter} \n            setSelectedCharacter={this.props.setSelectedCharacter}\n            setActiveScreen={this.props.setActiveScreen}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Win;","import React from 'react';\nimport { SCREENS } from './constants';\nimport CharacterSelect from '../UI/CharacterSelect';\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: 'rgb(4, 49, 61)',\n            backgroundImage: `url(\"${window.PUBLIC_URL}/fire_man_blue.jpg\")`,\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundPositionY: '10px'\n\n          }}\n        >\n          <CharacterSelect \n            characters={this.props.characters} \n            selectedCharacter={this.props.selectedCharacter} \n            setSelectedCharacter={this.props.setSelectedCharacter}\n            setActiveScreen={this.props.setActiveScreen}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Title;","import React from 'react';\nimport { SCREENS } from '../Screen/constants';\n\nconst ModeSelect = (props) => {\n  return (\n    <div className='CharacterSelect'>\n      {\n        props.modes.map((mode, index) => {\n          let color = '';\n          if (props.selectedMode) {\n            color = props.selectedMode.name === mode.name ? 'red' : ''\n          }\n\n          return (\n            <button\n              key={index}\n              style={{\n                position: 'relative',\n                top: '280px'\n              }}\n              className={`CharacterSelect__button btn btn-main`}\n              onClick={() => {\n                console.log(mode);\n                \n                props.setSelectedMode(mode)\n                props.setActiveScreen(SCREENS.CHARACTER_SELECT)\n              }}\n            >\n              {mode.name}\n            </button>\n          )\n        })\n      }\n    </div>\n  );\n}\n\nexport default ModeSelect;","import Level from './Level';\nimport Title from './Title';\nimport Lose from './Lose';\nimport Win from './Win';\nimport CharacterSelect from './CharacterSelect';\nimport ModeSelect from './ModeSelect';\n\nexport default {\n  Level,\n  Title,\n  Win,\n  Lose,\n  CharacterSelect,\n  ModeSelect,\n}","import React from 'react';\nimport { SCREENS } from './constants';\nimport ModeSelect from '../UI/ModeSelect';\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: 'rgb(4, 49, 61)',\n            backgroundImage: `url(\"${window.PUBLIC_URL}/fire_man_blue.jpg\")`,\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundPositionY: '10px'\n\n          }}\n        >\n          <ModeSelect \n            modes={this.props.modes} \n            selectedMode={this.props.selectedMode} \n            setSelectedMode={this.props.setSelectedMode}\n            setActiveScreen={this.props.setActiveScreen}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Title;","import { MESSAGE_TYPE } from '../message';\nimport { Base } from './Base';\nimport * as Helper from '../../helper';\n\nexport class DropItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} drops ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.removeFromContainer(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    };\n  }\n}\n;\n","import { ALPHABET, DIRECTIONS } from '../constants';\n\nexport const addAlphabeticallyToKeymap = (keymap, obj) => {\n  let alphabetAllowed = ALPHABET.filter((letter) => {\n    return !Object.keys(keymap).includes(letter);\n  });\n  keymap[alphabetAllowed[0]] = obj;\n}\n\nexport const deactivateUIKeymap = (engine, visibleUIKey) => {\n  let currentUiActor = engine.actors[engine.currentActor];\n  engine.game.removeActor(currentUiActor);\n  engine.game[visibleUIKey] = null;\n}\n\nexport const createFourDirectionMoveOptions = (moveFunction, engine, label = 'move', hidden = false) => {\n  return {\n    w: {\n      activate: () => moveFunction(DIRECTIONS.N, engine),\n      label: `${label} N`,\n      hidden,\n    },\n    d: {\n      activate: () => moveFunction(DIRECTIONS.E, engine),\n      label: `${label} E`,\n      hidden,\n    },\n    s: {\n      activate: () => moveFunction(DIRECTIONS.S, engine),\n      label: `${label} S`,\n      hidden,\n    },\n    a: {\n      activate: () => moveFunction(DIRECTIONS.W, engine),\n      label: `${label} W`,\n      hidden,\n    },\n  }\n}\n\nexport const createEightDirectionMoveOptions = (moveFunction, engine, label = 'move') => {\n  return {\n    w: {\n      activate: () => moveFunction(DIRECTIONS.N, engine),\n      label: `${label} N`,\n    },\n    e: {\n      activate: () => moveFunction(DIRECTIONS.NE, engine),\n      label: `${label} NE`,\n    },\n    d: {\n      activate: () => moveFunction(DIRECTIONS.E, engine),\n      label: `${label} E`,\n    },\n    c: {\n      activate: () => moveFunction(DIRECTIONS.SE, engine),\n      label: `${label} SE`,\n    },\n    x: {\n      activate: () => moveFunction(DIRECTIONS.S, engine),\n      label: `${label} S`,\n    },\n    z: {\n      activate: () => moveFunction(DIRECTIONS.SW, engine),\n      label: `${label} SW`,\n    },\n    a: {\n      activate: () => moveFunction(DIRECTIONS.W, engine),\n      label: `${label} W`,\n    },\n    q: {\n      activate: () => moveFunction(DIRECTIONS.NW, engine),\n      label: `${label} NW`,\n    },\n  }\n}","import * as Constant from '../../constants';\nimport { UI_Actor } from '../../Entities/index';\nimport { DropItem } from \"../../Actions/DropItem\";\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapDropFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      // g: {\n      activate: () => deactivateUIKeymap(engine, 'visibleInventory'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((slot, index) => {\n    const item = slot.items[0];\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to drop ${item.name}`);\n      initiatedBy.setNextAction(new DropItem({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n        energyCost: Constant.ENERGY_THRESHOLD\n      }));\n      deactivateUIKeymap(engine, 'visibleInventory');\n    }\n    obj['label'] = `Drop ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateDropItem = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'D',\n      color: 'white',\n      background: '',\n    },\n    name: 'Drop',\n    game: engine.game,\n  })\n  engine.addActorAsPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapDropFromInventory(engine, currentActor);\n}","import { MESSAGE_TYPE } from '../message';\nimport { Base } from './Base';\nimport * as Helper from '../../helper';\n\nexport class UnequipItemToTile extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} drops ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.unequip(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.splice(0, 0, this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    };\n  }\n}\n;\n","import { UnequipItemToTile } from \"../../Actions/UnequipItemToTile\";\nimport { UnequipItem } from \"../../Actions/UnequipItem\";\nimport { UI_Actor } from '../../Entities/index';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapEquipment = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => deactivateUIKeymap(engine, 'visibleEquipment'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.equipment.filter((slot) => slot.item).map((slot) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      initiatedBy.setNextAction(new UnequipItemToTile({\n        item: slot.item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      deactivateUIKeymap(engine, 'visibleEquipment');\n    }\n    obj['label'] = `Unequip ${slot.item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateEquipment = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleEquipment = currentActor.equipment;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'E',\n      color: 'white',\n      background: '',\n    },\n    name: 'Equipment',\n    game: engine.game,\n  })\n  engine.addActorAsPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipment(engine, currentActor);\n}","import { MESSAGE_TYPE } from '../message';\nimport { Base } from './Base';\nexport class EquipItemFromContainer extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.actor.addToContainer(itemInSlot);\n        this.actor.unequip(itemInSlot);\n      }\n      this.actor.removeFromContainer(this.item);\n      this.actor.equip(this.item.equipmentType, this.item);\n      this.game.addMessage(`${this.actor.name} equips ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n      success = true;\n    }\n    this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative,\n    };\n  }\n}\n;\n","import { UI_Actor } from '../../Entities/index';\nimport { EquipItemFromContainer } from \"../../Actions/EquipItemFromContainer\";\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapEquipFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => deactivateUIKeymap(engine, 'visibleInventory'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((slot, index) => {\n    const item = slot.items[0];\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to equip ${item.name}`);\n      initiatedBy.setNextAction(new EquipItemFromContainer({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      deactivateUIKeymap(engine, 'visibleInventory');\n    }\n    obj['label'] = `Equip ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateInventory = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'I',\n      color: 'white',\n      background: '',\n    },\n    name: 'Inventory',\n    game: engine.game,\n    // keymap: keymapEquipFromInventory(engine, currentActor),\n  })\n  engine.addActorAsPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipFromInventory(engine, currentActor);\n}","import { PlaceActor } from \"../../Actions/PlaceActor\";\nimport * as Constant from '../../constants';\nimport * as Item from '../../items';\nimport { createEightDirectionMoveOptions } from '../helper';\n\nconst throwDirectionalKunai = (direction, engine, actor) => {\n  let kunai = actor.contains(Item.TYPE.DIRECTIONAL_KUNAI);\n  if (kunai) {\n    kunai.game = engine.game;\n    kunai.pos = {\n      x: actor.pos.x,\n      y: actor.pos.y,\n    };\n    kunai.direction = direction;\n    actor.removeFromContainer(kunai);\n    actor.setNextAction(\n      new PlaceActor({\n        targetPos: { ...kunai.pos },\n        entity: kunai,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nconst keymapCursorToThrowItem = (engine, initiatedBy, initialKeymap) => {\n  return {\n    ...createEightDirectionMoveOptions(\n      (direction, engine) => {\n        throwDirectionalKunai(direction, engine, initiatedBy);\n        initiatedBy.keymap = initialKeymap;\n      },\n      engine,\n      'throw',\n    )\n  }\n}\n\nexport const activateThrow = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let initialKeymap = currentActor.keymap;\n  currentActor.keymap = keymapCursorToThrowItem(engine, currentActor, initialKeymap);\n}","import { MESSAGE_TYPE } from '../message';\nimport { TYPE as ITEM_TYPES } from '../items';\nimport SOUNDS from '../sounds';\nimport { Base } from './Base';\nimport * as Helper from '../../helper';\nimport * as Constant from '../constants';\n\nexport class SprayWater extends Base {\n  constructor({ targetPos, radius = 1, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos;\n    this.radius = radius;\n    this.particleTemplate = Constant.PARTICLE_TEMPLATES.water;\n  }\n  perform() {\n    if (!this.actor.hasItemNameEquipped(ITEM_TYPES.WATER_GUN)) {\n      this.game.addMessage(`${this.actor.name} doesn't have a ${ITEM_TYPES.WATER_GUN}.`, MESSAGE_TYPE.ERROR);\n      return {\n        success: false,\n        alternative: null,\n      };\n    }\n    let structure = {\n      x_offset: 0,\n      y_offset: 0,\n      positions: Array(this.radius).fill('').reduce((acc, curr, i) => {\n        return acc.concat(...Helper.getPointsOnCircumference(0, 0, i + 1));\n      }, [])\n    };\n    const positions = structure.positions.map((slot) => {\n      return {\n        x: this.targetPos.x + slot.x + structure.x_offset,\n        y: this.targetPos.y + slot.y + structure.y_offset\n      };\n    }).concat({ ...this.targetPos });\n    positions.forEach((position) => {\n      const tile = this.game.map[Helper.coordsToString(position)];\n      if (tile) {\n        if (tile.type === 'BURNT')\n          tile.type = 'GROUND';\n        if (tile.type === 'FLOOR')\n          tile.type = 'WET';\n      }\n    });\n    // adding particles\n    positions.forEach((pos) => {\n      this.addParticle(3, { ...pos }, {\n        x: Math.sign(pos.x - this.targetPos.x),\n        y: Math.sign(pos.y - this.targetPos.y)\n      });\n    });\n    // sounds\n    const sound = Helper.getRandomInArray([SOUNDS.water_0, SOUNDS.water_1]);\n    sound.play();\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    };\n  }\n}\n;\n","import { Base } from './Base';\nimport * as Helper from '../../helper';\n\nexport class CursorMove extends Base {\n  constructor({ targetPos, processDelay = 0, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    const initiatedFrom = this.actor.initiatedBy.pos;\n    const path = Helper.calculatePath(this.game, this.targetPos, initiatedFrom, 8);\n    const isInRange = this.actor.range ? path.length <= this.actor.range : true;\n    if (isInRange && this.game.cursorCanOccupyPosition(this.targetPos)) {\n      let tile = this.game.map[Helper.coordsToString(this.actor.pos)];\n      this.game.map[Helper.coordsToString(this.actor.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.actor.id) };\n      this.actor.pos = this.targetPos;\n      this.game.map[Helper.coordsToString(this.targetPos)].entities.push(this.actor);\n      success = true;\n    }\n    return {\n      success,\n      alternative,\n    };\n  }\n}\n;\n","import { CursorMove } from \"../../Actions/CursorMove\";\n\nexport const moveCursor = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new CursorMove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: 0,\n  }))\n}","import { SprayWater } from \"../../Actions/SprayWater\";\nimport * as Constant from '../../constants';\nimport { UI_Actor } from '../../Entities/index';\nimport { moveCursor } from './moveCursor';\nimport { createFourDirectionMoveOptions } from '../helper';\n\nconst trigger = (engine, actor, radius = 1) => {\n  let cursor = engine.actors[engine.currentActor];\n\n  actor.setNextAction(\n    // new Action.Say({\n    //   game: engine.game,\n    //   actor,\n    //   message: 'I\\'ll crush you!',\n    //   energyCost: Constant.ENERGY_THRESHOLD\n    // })\n    new SprayWater({\n      targetPos: { ...cursor.pos },\n      radius,\n      game: engine.game,\n      actor,\n      energyCost: Constant.ENERGY_THRESHOLD\n    })\n  )\n}\n\nconst keymap = (engine, initiatedBy, previousKeymap, radius) => {\n  const goToPreviousKeymap = () => {\n    let cursor = engine.actors[engine.currentActor];\n    cursor.active = false;\n    engine.game.removeActor(cursor);\n    // make sure actor is burnable once targeting is complete or canceled\n    initiatedBy['willResetCanBurn'] = true;\n    \n  };\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Close',\n    },\n    ...createFourDirectionMoveOptions(moveCursor, engine),\n    t: {\n      activate: () => {\n        // make sure actor is burnable once targeting is complete or canceled\n        initiatedBy['canBurn'] = true;\n        trigger(engine, initiatedBy, radius);\n        goToPreviousKeymap();\n      },\n      label: 'activate'\n    },\n  };\n}\n\nexport const activateProjectile = (engine, radius, range = 2) => {\n  let currentActor = engine.actors[engine.currentActor]\n  let game = engine.game;\n  let pos = currentActor.pos;\n  // prevent player from being burned while on fire.\n  currentActor['canBurn'] = false;\n\n  let cursor = new UI_Actor({\n    initiatedBy: currentActor,\n    range,\n    pos,\n    renderer: {\n      character: '█',\n      color: 'white',\n      background: '',\n    },\n    name: 'Cursor',\n    game,\n    keymap: keymap(engine, currentActor, { ...currentActor.keymap }, radius),\n  })\n  engine.addActorAsPrevious(cursor);\n  game.placeActorOnMap(cursor)\n  game.draw()\n}","import { Move } from \"../../Actions/Move\";\nimport * as Constant from '../../constants';\n\nexport const walk = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Move({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}","import { MESSAGE_TYPE } from '../message';\nimport { Base } from './Base';\nimport * as Helper from '../../helper';\n\nexport class PickupItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    this.game.addMessage(`${this.actor.name} picks up ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n    this.actor.addToContainer(this.item);\n    let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities;\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    };\n  }\n}\n;\n","import { MESSAGE_TYPE } from '../message';\nimport { Base } from './Base';\nimport * as Helper from '../../helper';\n\nexport class EquipItemFromTile extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      // if (itemInSlot) {\n      //   this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(itemInSlot);\n      // }\n      if (itemInSlot) {\n        this.game.addMessage(`${this.actor.name}\\'s equipment slots are full.`, MESSAGE_TYPE.ERROR);\n      }\n      else {\n        this.actor.equip(this.item.equipmentType, this.item);\n        let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities;\n        this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n        this.game.addMessage(`${this.actor.name} equips ${this.item.name}.`, MESSAGE_TYPE.ACTION);\n        success = true;\n        this.actor.energy -= this.energyCost;\n      }\n    }\n    return {\n      success,\n      alternative,\n    };\n  }\n}\n;\n","import { Shove } from \"../../Actions/Shove\";\nimport { ENERGY_THRESHOLD } from '../../constants';\n\nexport const push = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Shove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    direction,\n    energyCost: ENERGY_THRESHOLD,\n    processDelay: 25,\n  }))\n}","import { Base } from './Base';\nimport { Attack } from \"./Attack\";\nimport * as Constant from '../constants';\n\nexport class MoveMultiple extends Base {\n  constructor({ direction, stepCount, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    if (this.stepCount > 0 && this.actor.move(targetPos)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      success = true;\n    }\n    else {\n      success = true;\n      alternative = new Attack({\n        targetPos: targetPos,\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      });\n    }\n    return {\n      success,\n      alternative,\n    };\n  }\n}\n;\n","import { MoveMultiple } from './MoveMultiple';\nexport class Tackle extends MoveMultiple {\n  constructor({ direction, stepCount, additionalAttackDamage = 0, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.additionalAttackDamage = additionalAttackDamage;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    if (this.stepCount > 0 && this.actor.shove(targetPos, this.direction)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      for (let i = 0; i < 3; i++) {\n        this.addParticle(1, {\n          x: this.actor.pos.x - (this.direction[0] * i),\n          y: this.actor.pos.y - (this.direction[1] * i),\n        }, { x: 0, y: 0 });\n      }\n      success = true;\n    }\n    else {\n      success = true;\n      this.actor.attack(targetPos, this.additionalAttackDamage);\n    }\n    return {\n      success,\n      alternative,\n    };\n  }\n}\n;\n","import { Tackle } from \"../../Actions/Tackle\";\nimport { ENERGY_THRESHOLD, PARTICLE_TEMPLATES } from '../../constants';\nimport { createFourDirectionMoveOptions } from '../helper';\n\nconst flyingLotus = (direction, stepCount, energyCost, additionalAttackDamage, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Tackle({\n    direction,\n    stepCount,\n    game: engine.game,\n    actor,\n    additionalAttackDamage,\n    energyCost,\n    particleTemplate: PARTICLE_TEMPLATES.leaf\n  }))\n}\n\nconst keymapFlyingLotus = (engine, initiatedBy, previousKeymap) => {\n  const energyCost = Math.floor(ENERGY_THRESHOLD / 2);\n  const stepCount = Math.floor(initiatedBy.energy / energyCost) - 1;\n  const additionalAttackDamage = stepCount;\n  const goToPreviousKeymap = () => initiatedBy.keymap = previousKeymap;\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Close',\n    },\n    ...createFourDirectionMoveOptions(\n      (direction, engine) => {\n        flyingLotus(direction, stepCount, energyCost, additionalAttackDamage, engine);\n        goToPreviousKeymap();\n      },\n      engine,\n      'activate',\n    ),\n  };\n}\n\nexport const activateFlyingLotus = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  currentActor.keymap = keymapFlyingLotus(engine, currentActor, { ...currentActor.keymap });\n}","export class Base {\n  constructor({ \n    game, \n    actor, \n    name = 'Effect', \n    lifespan = 100,\n    stepInterval = 100,\n    allowDuplicates = true,\n    onStart = () => null,\n    onStep = () => null,\n    onStop = () => null,\n  }) {\n    this.game = game\n    this.actor = actor\n    this.name = name\n    this.lifespan = lifespan\n    this.timeToLive = lifespan\n    this.stepInterval = stepInterval\n    this.allowDuplicates = allowDuplicates\n    this.timeSinceLastStep = 0;\n    this.onStart = onStart\n    this.onStep = onStep\n    this.onStop = onStop\n  }\n}","import { Base } from './Base';\nimport * as Helper from '../../helper'\n\nexport class AddStatusEffect extends Base {\n  constructor({ effect, processDelay = 0, ...args }) {\n    super({ ...args });\n    this.effect = effect;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = this.game.engine.addStatusEffect(this.effect);\n    let positions = Helper.getPointsOnCircumference(this.actor.pos.x, this.actor.pos.y, 2);\n    positions.forEach((pos) => {\n      this.addParticle(5, { ...pos }, {\n        x: Math.sign(pos.x - this.actor.pos.x),\n        y: Math.sign(pos.y - this.actor.pos.y)\n      });\n    });\n    if (success)\n      this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative: null,\n    };\n  }\n}\n;\n","import { DIRECTIONS, ENERGY_THRESHOLD } from '../../constants';\nimport * as StatusEffect from '../../statusEffects';\nimport { Move } from \"../../Actions/Move\";\nimport { AddStatusEffect } from \"../../Actions/AddStatusEffect\";\nimport { walk } from './walk';\nimport { getRandomInArray } from '../../../helper';\n\nconst drunkWalk = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let originalDirection = [...direction];\n  let chance = Math.random();\n  if (chance < 0.5) {\n    console.log('drunk misstep');\n    let count = 100\n    while ((direction[0] === originalDirection[0] && direction[1] === originalDirection[1]) || count < 0) {\n      count -= 1;\n      direction = DIRECTIONS[getRandomInArray(Object.keys(DIRECTIONS))];\n    }\n    console.log(count);\n  }\n\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Move({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: ENERGY_THRESHOLD\n  }))\n}\n\nexport const drunkenFist = (engine, damageBuff = 1) => {\n  let currentActor = engine.actors[engine.currentActor];\n\n  let effect = new StatusEffect.Base({\n    game: engine.game,\n    actor: currentActor,\n    name: 'Drunk',\n    lifespan: 1000,\n    stepInterval: 100,\n    allowDuplicates: false,\n    onStart: () => {\n      currentActor.attackDamage += damageBuff;\n      currentActor.renderer.character = '?';\n      console.log(`${currentActor.name} took a sip of sake.`);\n      currentActor.keymap.w = {\n        activate: () => drunkWalk(DIRECTIONS.N, engine),\n        label: 'drunken walk'\n      }\n      currentActor.keymap.a = {\n        activate: () => drunkWalk(DIRECTIONS.W, engine),\n        label: 'drunken walk'\n      }\n      currentActor.keymap.s = {\n        activate: () => drunkWalk(DIRECTIONS.S, engine),\n        label: 'drunken walk'\n      }\n      currentActor.keymap.d = {\n        activate: () => drunkWalk(DIRECTIONS.E, engine),\n        label: 'drunken walk'\n      }\n    },\n    onStop: () => {\n      currentActor.attackDamage -= damageBuff;\n      currentActor.renderer.character = 'R';\n      console.log(`${currentActor.name} recovered from drunkeness.`);\n      currentActor.keymap.w = {\n        activate: () => walk(DIRECTIONS.N, engine),\n        label: 'walk'\n      }\n      currentActor.keymap.a = {\n        activate: () => walk(DIRECTIONS.W, engine),\n        label: 'walk'\n      }\n      currentActor.keymap.s = {\n        activate: () => walk(DIRECTIONS.S, engine),\n        label: 'walk'\n      }\n      currentActor.keymap.d = {\n        activate: () => walk(DIRECTIONS.E, engine),\n        label: 'walk'\n      }\n    },\n  });\n  currentActor.setNextAction(new AddStatusEffect({\n    effect,\n    actor: currentActor,\n    game: engine.game,\n    processDelay: 100,\n    particleTemplate: {\n      renderer: {\n        color: '#c45ffd',\n        background: '#424242',\n        character: '?'\n      }\n    },\n  }));\n}","import { Base } from './Base';\nimport { Say } from './Say';\nimport * as Constant from '../constants';\n\nexport class MultiTargetAttack extends Base {\n  constructor({ targetPositions, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.targetPositions = targetPositions;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (!this.actor.entityTypes.includes('ATTACKING')) {\n      return {\n        success: true,\n        alternative: new Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      };\n    }\n    let particlePath = [];\n    let particlePos = { x: this.actor.pos.x, y: this.actor.pos.y };\n    let renderer = this.particleTemplate.renderer;\n    this.targetPositions.forEach((targetPos) => {\n      let attackSuccess = this.actor.attack(targetPos);\n      particlePath.push(targetPos);\n      if (attackSuccess)\n        success = true;\n    });\n    this.addParticle(particlePath.length + 1, particlePos, null, renderer, Constant.PARTICLE_TYPE.path, particlePath);\n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    return {\n      success,\n      alternative,\n    };\n  }\n}\n;\n","import { Attack } from \"../../Actions/Attack\";\nimport { getDirectionKey, DIRECTIONS, ENERGY_THRESHOLD, THEMES } from '../../constants';\n\n\nconst keyMapChop = (engine, initiatedBy, previousKeymap, animations) => {\n  let actor = engine.actors[engine.currentActor];\n  const goToPreviousKeymap = () => {\n    initiatedBy.keymap = previousKeymap;\n    // animation code\n    if (animations.length) {\n      animations.forEach((animation) => engine.game.display.removeAnimation(animation.id))\n    }\n    // end\n  }\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Cancel Chop',\n    },\n    w: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.N[0], //[0, -1]\n            y: actor.pos.y + DIRECTIONS.N[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate N',\n    },\n    d: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.E[0],\n            y: actor.pos.y + DIRECTIONS.E[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate E',\n    },\n    s: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.S[0],\n            y: actor.pos.y + DIRECTIONS.S[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate S',\n    },\n    a: {\n      activate: () => {\n        let targetPos = {\n            x: actor.pos.x + DIRECTIONS.W[0],\n            y: actor.pos.y + DIRECTIONS.W[1]\n        }\n        actor.setNextAction( new Attack({\n            targetPos: targetPos,\n            game: engine.game,\n            actor: actor,\n        }))\n        goToPreviousKeymap();\n      },\n      label: 'activate W',\n    },\n  };\n}\n\nexport const chop = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n\n  // animation code: could be abstrated for easier use\n  const directions = [\n    DIRECTIONS.N,\n    DIRECTIONS.E,\n    DIRECTIONS.S,\n    DIRECTIONS.W,\n  ];\n\n  let animations = [];\n\n  directions.forEach((direction) => {\n    let pos = {\n      x: currentActor.pos.x + direction[0],\n      y: currentActor.pos.y + direction[1],\n    }\n    const animation = engine.game.display.addAnimation(1, { x: pos.x, y: pos.y, color: THEMES.SOLARIZED.base3 })\n    animations.push(animation);\n  })\n  // end\n\n  currentActor.keymap = keyMapChop(engine, currentActor, { ...currentActor.keymap }, animations);\n}","import SOUNDS from '../sounds';\nimport { Base } from './Base';\nimport * as Constant from '../constants';\n\nexport class ReleaseGrab extends Base {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    const releasedEntity = this.actor.release();\n    if (releasedEntity) {\n      this.actor.energy -= this.energyCost;\n      // add particles\n      this.addParticle(2, { ...releasedEntity.pos }, { x: 0, y: 0 }, Constant.PARTICLE_TEMPLATES.succede.renderer);\n      success = true;\n      SOUNDS.release_0.play();\n    }\n    ;\n    return {\n      success,\n      alternative,\n    };\n  }\n}\n;\n","import SOUNDS from '../sounds';\nimport { Base } from './Base';\nimport * as Constant from '../constants';\n\nexport class GrabDirection extends Base {\n  constructor({ targetPos, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (this.actor.grab(this.targetPos)) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n      // add particles\n      this.addParticle(2, { ...this.targetPos }, { x: 0, y: 0 }, Constant.PARTICLE_TEMPLATES.succede.renderer);\n      SOUNDS.grab_0.play();\n    }\n    return {\n      success,\n      alternative,\n    };\n  }\n}\n;\n","import { ReleaseGrab } from \"../../Actions/ReleaseGrab\";\nimport { GrabDirection } from \"../../Actions/GrabDirection\";\nimport * as Constant from '../../constants';\nimport { createFourDirectionMoveOptions } from '../helper';\n\nconst grabDirection = (direction, engine, actor, animation) => {\n  const pos = {\n    x: actor.pos.x + direction[0],\n    y: actor.pos.y + direction[1],\n  };\n  actor.setNextAction(\n    new GrabDirection({\n      targetPos: pos,\n      game: engine.game,\n      actor,\n      energyCost: Constant.ENERGY_THRESHOLD,\n    })\n  )\n}\n\n\nconst keymapCursorToGrabEntity = (engine, initiatedBy, initialKeymap, animations) => {\n  const goToPreviousKeymap = () => {\n    initiatedBy.keymap = initialKeymap;\n    // animation code\n    if (animations.length) {\n      animations.forEach((animation) => engine.game.display.removeAnimation(animation.id))\n    }\n    // end\n  }\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Cancel Grab',\n    },\n    ...createFourDirectionMoveOptions(\n      (direction, engine) => {\n        grabDirection(direction, engine, initiatedBy);\n        goToPreviousKeymap();\n      },\n      engine,\n      'grab',\n    )\n  }\n}\n\nexport const activateGrab = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let initialKeymap = currentActor.keymap;\n\n  // animation code: could be abstrated for easier use\n  const directions = [\n    Constant.DIRECTIONS.N,\n    Constant.DIRECTIONS.E,\n    Constant.DIRECTIONS.S,\n    Constant.DIRECTIONS.W,\n  ];\n\n  let animations = [];\n\n  directions.forEach((direction) => {\n    let pos = {\n      x: currentActor.pos.x + direction[0],\n      y: currentActor.pos.y + direction[1],\n    }\n    const animation = engine.game.display.addAnimation(1, { x: pos.x, y: pos.y, color: Constant.THEMES.SOLARIZED.base3 })\n    animations.push(animation);\n  }) \n  // end\n\n  currentActor.keymap = keymapCursorToGrabEntity(engine, currentActor, initialKeymap, animations);\n}\n\nexport const releaseGrab = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new ReleaseGrab({\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}","// import deps\nimport * as Item from '../items';\nimport { Player } from '../Entities/index';\nimport { ContainerSlot } from '../Entities/Containing';\nimport * as Constant from '../constants';\nimport * as Keymap from '../Keymap';\nimport { createEightDirectionMoveOptions } from '../Keymap/helper';\n\nexport default function (engine) {\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      ...createEightDirectionMoveOptions(Keymap.walk, engine),\n      s: {\n        activate: () => Keymap.none(engine),\n        label: 'stay',\n      },\n      l: {\n        activate: () => Keymap.activateFlyingLotus(engine),\n        label: 'Flying Lotus',\n      },\n      k: {\n        activate: () => Keymap.removeWeights(engine, 200),\n        label: 'Remove wraps',\n      },\n      j: {\n        activate: () => Keymap.drunkenFist(engine),\n        label: 'Sip Sake',\n      },\n      h: {\n        activate: () => Keymap.leafWhirlwind(engine),\n        label: 'Leaf Whirlwind',\n      },\n      g: {\n        activate: () => Keymap.openInnerGate(engine),\n        label: 'Gate of Opening',\n      },\n      i: {\n        activate: () => Keymap.activateInventory(engine),\n        label: 'Open Inventory',\n      },\n      o: {\n        activate: () => Keymap.activateEquipment(engine),\n        label: 'Open Equipment',\n      },\n      u: {\n        activate: () => Keymap.activateDropItem(engine),\n        label: 'Drop Item',\n      },\n      p: {\n        activate: () => Keymap.pickupRandom(engine),\n        label: 'Pickup',\n      },\n      t: {\n        activate: () => Keymap.activateThrow(engine),\n        label: 'Throw',\n      },\n      // DEV KEYS\n      y: {\n        activate: () => Keymap.addActor(engine.game),\n        label: 'Add NPC',\n      },\n    };\n  }\n  // instantiate class\n  let actor = new Player({\n    pos: { x: 23, y: 7 },\n    renderer: {\n      character: 'R',\n      color: Constant.THEMES.SOLARIZED.base3,\n      background: Constant.THEMES.SOLARIZED.yellow,\n    },\n    name: 'Rock Lee',\n    actions: [],\n    speed: 400,\n    durability: 20,\n    keymap: keymap(engine),\n  })\n\n  // add default items to container\n  const kunais = Array(100).fill('').map(() => Item.directionalKunai(engine, { ...actor.pos }, null, 10));\n  const swords = Array(2).fill('').map(() => Item.sword(engine));\n  actor.container = [\n    new ContainerSlot({\n      itemType: kunais[0].name,\n      items: kunais,\n    }),\n    new ContainerSlot({\n      itemType: swords[0].name,\n      items: swords,\n    }),\n  ]\n\n  return actor;\n}","import { Say } from \"../../Actions/Say\";\nimport * as Constant from '../../constants';\n\nexport const none = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Say({\n    message: 'standing still...',\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}","import * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect } from \"../../Actions/AddStatusEffect\";\n\nexport const removeWeights = (engine, speedBoost = 600, damageDebuff = 1) => {\n  let currentActor = engine.actors[engine.currentActor];\n\n  let effect = new StatusEffect.Base({\n    game: engine.game,\n    actor: currentActor,\n    name: 'Removed wraps (weights)',\n    lifespan: 1000,\n    stepInterval: 100,\n    allowDuplicates: false,\n    onStart: () => {\n      currentActor.speed += speedBoost;\n      currentActor.attackDamage = Math.max(0, currentActor.attackDamage - damageDebuff);\n      currentActor.energy += speedBoost;\n      currentActor.renderer.character = '〣'\n      console.log(`${currentActor.name} removed weighted wraps.`);\n    },\n    onStop: () => {\n      currentActor.speed -= speedBoost;\n      currentActor.attackDamage += damageDebuff;\n      currentActor.renderer.character = 'R'\n      console.log(`${currentActor.name} rewrapped weights.`);\n    },\n  });\n  currentActor.setNextAction(new AddStatusEffect({\n    effect,\n    actor: currentActor,\n    game: engine.game,\n    particleTemplate: {\n      renderer: {\n        color: '#424242',\n        background: '#e6e6e6',\n        character: '〣'\n      }\n    }\n  }));\n}","import { MultiTargetAttack } from \"../../Actions/MultiTargetAttack\";\nimport { ENERGY_THRESHOLD, PARTICLE_TEMPLATES } from '../../constants';\n\nexport const leafWhirlwind = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let targetPositions = [\n    {\n      x: actor.pos.x - 1,\n      y: actor.pos.y,\n    },\n    {\n      x: actor.pos.x - 1,\n      y: actor.pos.y - 1,\n    },\n    {\n      x: actor.pos.x,\n      y: actor.pos.y - 1,\n    },\n    {\n      x: actor.pos.x + 1,\n      y: actor.pos.y - 1,\n    },\n    {\n      x: actor.pos.x + 1,\n      y: actor.pos.y,\n    },\n    {\n      x: actor.pos.x + 1,\n      y: actor.pos.y + 1,\n    },\n    {\n      x: actor.pos.x,\n      y: actor.pos.y + 1,\n    },\n    {\n      x: actor.pos.x - 1,\n      y: actor.pos.y + 1,\n    },\n  ]\n\n  actor.setNextAction(new MultiTargetAttack({\n    targetPositions,\n    game: engine.game,\n    actor,\n    energyCost: (ENERGY_THRESHOLD * 8),\n    particleTemplate: PARTICLE_TEMPLATES.leaf,\n  }))\n}","import * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect } from \"../../Actions/AddStatusEffect\";\n\nexport const openInnerGate = (engine) => {\n  let currentActor = engine.actors[engine.currentActor];\n  let nextGate = currentActor.setNextGate();\n  if (nextGate) {\n    let effect = new StatusEffect.Base({\n      game: engine.game,\n      actor: currentActor,\n      name: nextGate.name,\n      lifespan: -1,\n      stepInterval: 100,\n      allowDuplicates: false,\n      onStart: () => {\n        currentActor.speed += nextGate.speedBuff;\n        currentActor.energy += nextGate.speedBuff;\n        currentActor.attackDamage += nextGate.damageBuff;\n        currentActor.renderer.character = nextGate.character;\n        console.log(`${currentActor.name} opened the ${nextGate.name}.`);\n        currentActor.decreaseDurability(nextGate.durabilityDebuff);\n        currentActor.decreaseDurability(0);\n        console.log(`${currentActor.name} suffers ${nextGate.durabilityDebuff} damage from physical stress.`)\n        let nextGateToLabel = currentActor.getNextGate();\n        if (nextGateToLabel) {\n          currentActor.keymap.o.label = nextGateToLabel.name;\n        } else {\n          delete currentActor.keymap.g;\n        }\n      },\n    });\n    currentActor.setNextAction(new AddStatusEffect({\n      effect,\n      actor: currentActor,\n      game: engine.game,\n      processDelay: 25,\n      particleTemplate: {\n        renderer: {\n          color: '#3cc2bb',\n          background: '#24fe88',\n          character: '#'\n        }\n      }\n    }));\n  }\n}","import { PickupItem } from \"../../Actions/PickupItem\";\nimport { EquipItemFromTile } from \"../../Actions/EquipItemFromTile\";\nimport { ENERGY_THRESHOLD } from '../../constants';\nimport { coordsToString, getRandomInArray } from '../../../helper';\nimport { MESSAGE_TYPE } from '../../message';\n\nexport const pickupRandom = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let entities = engine.game.map[coordsToString(actor.pos)].entities.filter((e) => e.id !== actor.id);\n  if (entities.length > 0) {\n    actor.setNextAction(new PickupItem({\n      item: getRandomInArray(entities),\n      game: engine.game,\n      actor,\n      energyCost: ENERGY_THRESHOLD\n    }));\n  }\n  else {\n    console.log('nothing to pickup.');\n  }\n};\n\nexport const equipRandomFromTile = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let entities = engine.game.map[coordsToString(actor.pos)].entities.filter((e) => e.id !== actor.id);\n  if (entities.length > 0) {\n    actor.setNextAction(new EquipItemFromTile({\n      item: getRandomInArray(entities),\n      game: engine.game,\n      actor,\n      energyCost: ENERGY_THRESHOLD\n    }));\n  }\n  else {\n    engine.game.addMessage(`nothing to equip.`, MESSAGE_TYPE.ACTION);\n  }\n};","import * as Helper from '../../../helper';\nimport * as Constant from '../../constants';\nimport { Bandit, RangedBandit, FireSpread } from '../../Entities/index';\nimport * as Item from '../../items';\n\nconst getBanditStats = () => {\n  let banditLevels = [\n    {\n      name: 'Slingshot',\n      renderer: {\n        character: Helper.getRandomInArray(['r']),\n        color: '#ced5dd',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: RangedBandit\n    },\n    {\n      name: 'Buckshot',\n      renderer: {\n        character: Helper.getRandomInArray(['r']),\n        color: '#3fc072',\n        background: '',\n      },\n      durability: 2,\n      attackDamage: 1,\n      speed: 200,\n      entityClass: RangedBandit\n    },\n    {\n      name: 'Ross',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#ced5dd',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: Bandit\n    },\n    {\n      name: 'Kevin',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#3fc072',\n        background: '',\n      },\n      durability: 2,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: Bandit\n    },\n    {\n      name: 'Jacob',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#67a1d7',\n        background: '',\n      },\n      durability: 3,\n      attackDamage: 1,\n      speed: 100,\n      entityClass: Bandit\n    },\n    {\n      name: 'Jarod',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#e16264',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 5,\n      speed: 300,\n      entityClass: Bandit\n    },\n    {\n      name: 'Bigii',\n      renderer: {\n        character: Helper.getRandomInArray(['b']),\n        color: '#9f62e1',\n        background: '',\n      },\n      durability: 15,\n      attackDamage: 10,\n      speed: 100,\n      entityClass: Bandit\n    },\n  ]\n  return Helper.getRandomInArray(banditLevels);\n}\n\nexport const addActor = (game) => {\n  // let targetEntity = game.engine.actors[game.engine.currentActor]\n  // let pos = Helper.getRandomPos(game.map).coordinates\n  // const banditStats = getBanditStats();\n  // let actor = new RangedBandit({\n  // let actor = new banditStats.entityClass({\n  //   targetEntity,\n  //   pos,\n  //   renderer: banditStats.renderer,\n  //   name: banditStats.name,\n  //   game,\n  //   actions: [],\n  //   attackDamage: banditStats.attackDamage,\n  //   durability: banditStats.durability,\n  //   speed: banditStats.speed,\n  //   // directional projectile destruction breaks engine\n  //   getProjectile: ({pos, targetPos, direction, range}) => Item.directionalKunai(game.engine, { ...pos }, direction, range)\n  //   // getProjectile: ({ pos, targetPos, direction, range }) => Item.kunai(game.engine, { ...pos }, { ...targetPos })\n  // })\n  let actor = new FireSpread({\n    name: 'Pyro',\n    game,\n    renderer: {\n      character: '*',\n      color: Constant.THEMES.SOLARIZED.base3,\n      background: Constant.THEMES.SOLARIZED.red,\n    },\n    timeToSpread: 1,\n    spreadCount: 1,\n    durability: 1,\n    attackDamage: 1,\n    speed: 100,\n  })\n  // game.placeActorOnMap(actor)\n  if (game.randomlyPlaceActorOnMap(actor)) {\n    game.engine.addActor(actor);\n    game.draw();\n  };\n}","// import deps\nimport { Player } from '../Entities/index'\nimport * as Constant from '../constants';\nimport * as Keymap from '../Keymap';\nimport { createFourDirectionMoveOptions } from '../Keymap/helper';\n\nexport default function (engine) {\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      ...createFourDirectionMoveOptions(Keymap.push, engine, 'push', true),\n      t: {\n        activate: () => Keymap.activateProjectile(engine, 1, 5),\n        label: 'shoot water',\n      },\n      c: {\n        activate: () => Keymap.chop(engine),\n        label: 'chop',\n      },\n      e: {\n        activate: () => Keymap.activateEquipment(engine),\n        label: 'equipment',\n      },\n      p: {\n        activate: () => Keymap.equipRandomFromTile(engine),\n        label: 'pick up',\n      },\n      g: {\n        activate: () => Keymap.activateGrab(engine),\n        label: 'grab',\n      },\n      r: {\n        activate: () => Keymap.releaseGrab(engine),\n        label: 'release',\n      },\n    };\n  }\n  // instantiate class\n  let actor = new Player({\n    pos: { x: 19, y: 22 },\n    renderer: {\n      character: 'F',\n      sprite: '',\n      color: Constant.THEMES.SOLARIZED.base3,\n      background: Constant.THEMES.SOLARIZED.yellow,\n    },\n    name: Constant.PLAYER_NAME,\n    equipment: Constant.EQUIPMENT_LAYOUTS.limited(),\n    actions: [],\n    speed: 100,\n    durability: 4000,\n    keymap: keymap(engine),\n  })\n\n  // default items to container\n  // const axe = Array(2).fill('').map(() => Item.axe(engine));\n  // actor.container = [\n  //   new Entity.ContainerSlot({\n  //     itemType: axe[0].name,\n  //     items: axe,\n  //   }),\n  // ]\n  return actor;\n}","import RockLee from './RockLee';\nimport FireFighter from './FireFighter';\n\nlet Characters = () => {\n  return {\n    RockLee,\n    FireFighter,\n  }\n}\n\nexport default Characters;","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { SCREENS } from './Screen/constants';\nimport Screens from './Screen/index';\nimport Characters from './Characters/index';\nimport Modes from './Modes/index';\nimport SOUNDS from './sounds';\n\nclass Nystrum extends React.Component {\n  constructor() {\n    super();\n    let characterKey = Characters();\n    let characters = Object.keys(characterKey).map((key, i) => {\n      return {\n        initialize: characterKey[key],\n        selected: false,\n        name: key,\n      }\n    });\n\n    let modes = Object.keys(Modes).map((key, i) => {\n      return {\n        class: Modes[key],\n        selected: false,\n        name: key,\n      }\n    });\n\n    this.state = {\n      activeScreen: SCREENS.TITLE,\n      characters,\n      modes,\n      selectedCharacter: null,\n      selectedMode: null,\n    };\n  }\n\n  setActiveScreen (activeScreen) {\n    if (activeScreen === SCREENS.TITLE) {\n      Object.keys(SOUNDS).forEach(key => {\n        SOUNDS[key].stop();\n      });\n    }\n    this.setState({activeScreen})\n  }\n\n  setSelectedCharacter (character) {\n    this.setState({selectedCharacter: {...character}})\n  }\n\n  setSelectedMode (mode) {\n    this.setState({selectedMode: mode})\n  }\n\n  getActiveScreen () {\n    const characterScreen = <Screens.CharacterSelect \n      key={SCREENS.CHARACTER_SELECT} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      setSelectedCharacter={this.setSelectedCharacter.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n      characters={this.state.characters}\n    />\n    const modeScreen = <Screens.ModeSelect \n      key={SCREENS.MODE_SELECT} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      setSelectedMode={this.setSelectedMode.bind(this)}\n      selectedMode={this.state.selectedMode}\n      modes={this.state.modes}\n    />\n    const titleScreen = <Screens.Title \n      key={SCREENS.TITLE} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      setSelectedCharacter={this.setSelectedCharacter.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n      characters={this.state.characters}\n    />\n    const loseScreen = <Screens.Lose \n      key={SCREENS.LOSE} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      setSelectedCharacter={this.setSelectedCharacter.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n      characters={this.state.characters}\n    />\n    const winScreen = <Screens.Win \n      key={SCREENS.WIN} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      setSelectedCharacter={this.setSelectedCharacter.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n      characters={this.state.characters}\n    />\n    const levelScreen = <Screens.Level \n      key={SCREENS.LEVEL} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n      selectedMode={this.state.selectedMode}\n    />\n\n    switch (this.state.activeScreen) {\n      case SCREENS.CHARACTER_SELECT:\n        return characterScreen\n      case SCREENS.MODE_SELECT:\n        return modeScreen\n      case SCREENS.TITLE:\n        return titleScreen\n      case SCREENS.LOSE:\n        return loseScreen\n      case SCREENS.WIN:\n        return winScreen\n      case SCREENS.LEVEL:\n        return levelScreen\n      default:\n        return titleScreen\n    }\n  }\n\n  render() {\n    const activeScreen = this.getActiveScreen();\n    return (\n      <div className=\"Nystrum\">\n        <ReactCSSTransitionGroup\n          transitionName=\"fade\"\n          transitionAppear={true}\n          transitionEnter={true}\n          transitionLeave={true}\n          transitionAppearTimeout={500}\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={300}\n        >\n          { activeScreen }\n        </ReactCSSTransitionGroup>\n      </div>\n    );\n  }\n}\n\nexport default Nystrum;\n","import React from 'react';\nimport './App.css';\nimport Nystrum from './nystrum/Nystrum';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Nystrum />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}